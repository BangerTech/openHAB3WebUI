{
  "3D-Print-Mobile": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "3D-Print-Mobile",
      "tags": [],
      "props": {
        "parameters": [
          {
            "description": "icon1 name without \".png\", located in static/icons/ folder",
            "label": "Icon1",
            "name": "iconimage1",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "icon2 name without \".png\", located in static/icons/ folder",
            "label": "Icon2",
            "name": "iconimage2",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set the Power item here",
            "label": "Power",
            "name": "poweritem",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set the Light item here",
            "label": "Light",
            "name": "lightitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Set the height of the Widget",
            "label": "Widget Height",
            "name": "cardheight",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Name your Printer!",
            "label": "Printer Name",
            "name": "printername",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set item for Bed Temperature here",
            "label": "Bed Temperature",
            "name": "bedtempitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set item for Hotend Temperature here",
            "label": "Hotend Temperature",
            "name": "hotendtempitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set item for Time Left here",
            "label": "Time Left",
            "name": "timeleftitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set item for Progress here",
            "label": "Progress",
            "name": "progressitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Set the url of the live stream here",
            "label": "Url live stream",
            "name": "urllivestream",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "rgba or HEX",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:21:49 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "--weather-card-border-radius": "20px",
          "--weather-card-color": "\u003d(!props.fontColor) ? \u0027255,255,255\u0027 : props.fontColor",
          "--weather-card-text-color": "rgba(var(--weather-card-color),1)",
          "--weather-card-text-shadow-color": "\u003d(!props.textShadowColor) ? \u00270,0,0\u0027 : props.textShadowColor",
          "--weather-font-size-large": "26px",
          "--weather-font-size-normal": "18px",
          "--weather-font-size-small": "16px",
          "--weather-font-size-xlarge": "60px",
          "--weather-font-size-xsmall": "14px",
          "--weather-font-size-xxlarge": "70px",
          "--weather-font-size-xxsmall": "12px",
          "--weather-text-shadow-light": "2px 2px rgba(var(--weather-card-text-shadow-color),.15)",
          "--weather-text-shadow-strong": "2px 2px rgba(var(--weather-card-text-shadow-color),.35)",
          "--weather-text-transform-time": "uppercase",
          "-moz-user-select": "none",
          "-ms-user-select": "none",
          "-webkit-user-select": "none",
          "background": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--weather-card-border-radius)",
          "color": "var(--weather-card-text-color)",
          "height": "\u003dprops.cardheight ? props.cardheight : \"410px\"",
          "overflow": "hidden",
          "user-select": "none"
        }
      },
      "slots": {
        "default": [
          {
            "component": "f7-block",
            "config": {
              "class": [
                "no-padding",
                "no-margin"
              ],
              "style": {
                "height": "100%",
                "left": 0.0,
                "position": "absolute",
                "top": 0.0,
                "width": "100%"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "display": "grid",
                      "height": "10%",
                      "justify-content": "center",
                      "justify-items": "center",
                      "margin-top": "15px"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "22px",
                            "grid-column": 1.0,
                            "padding-top": "0px"
                          },
                          "text": "\u003dprops.printername ? props.printername : \"Printer Name\""
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "40% 60%",
                      "height": "5%"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-image",
                        "config": {
                          "height": 14.0,
                          "style": {
                            "align-self": "center",
                            "place-self": "end"
                          },
                          "url": "\u003d\u0027/static/icons/\u0027 + props.iconimage2 + \u0027.png\u0027",
                          "width": 14.0
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "16px",
                            "grid-column": 2.0,
                            "margin-left": "5px"
                          },
                          "text": "\u003ditems[props.bedtempitem].state ? items[props.bedtempitem].state + \" â„ƒ\" : \"Name\""
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "40% 60%",
                      "height": "5%"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-image",
                        "config": {
                          "height": 14.0,
                          "style": {
                            "align-self": "center",
                            "place-self": "end"
                          },
                          "url": "\u003d\u0027/static/icons/\u0027 + props.iconimage1 + \u0027.png\u0027",
                          "width": 14.0
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "16px",
                            "grid-column": 2.0,
                            "margin-left": "5px"
                          },
                          "text": "\u003ditems[props.hotendtempitem].state ? items[props.hotendtempitem].state + \" â„ƒ\" : \"Name\""
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "40% 60%",
                      "height": "5%"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-image",
                        "config": {
                          "height": 14.0,
                          "style": {
                            "align-self": "center",
                            "place-self": "end"
                          },
                          "url": "https://iconsplace.com/wp-content/uploads/_icons/ffffff/256/png/time-icon-18-256.png",
                          "width": 14.0
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "16px",
                            "grid-column": 2.0,
                            "margin-left": "5px"
                          },
                          "text": "\u003ditems[props.timeleftitem].state \u003d\u003d \"NULL\" ? \"not printing\" : Math.floor(items[props.timeleftitem].state /3600)+\":\"+ Math.floor(items[props.timeleftitem].state / 60) + \" h\""
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "30% 30% 30%",
                      "height": "20%",
                      "justify-items": "center"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-button",
                        "config": {
                          "action": "toggle",
                          "actionCommand": "ON",
                          "actionCommandAlt": "OFF",
                          "actionItem": "\u003dprops.poweritem",
                          "color": "\u003ditems[props.poweritem].state \u003d\u003d\u003d \"ON\" ? \"green\": \"red\"",
                          "height": "40px",
                          "iconF7": "power",
                          "iconSize": "25px"
                        }
                      },
                      {
                        "component": "f7-gauge",
                        "config": {
                          "border-color": "#005eff",
                          "style": {
                            "width": "110px"
                          },
                          "type": "semicircle",
                          "value": "\u003dprops.progressitem ? (items[props.progressitem].state \u003d\u003d \"NULL\" ? 0 : Math.floor(items[props.progressitem].state / 100)) : 0",
                          "value-text": "\u003dprops.progressitem ? (items[props.progressitem].state \u003d\u003d \"NULL\" ? \"0 %\" : items[props.progressitem].state + \" %\") : \"0\"",
                          "value-text-color": "#005eff",
                          "visible": true
                        }
                      },
                      {
                        "component": "oh-button",
                        "config": {
                          "action": "toggle",
                          "actionCommand": "ON",
                          "actionCommandAlt": "OFF",
                          "actionItem": "\u003dprops.lightitem",
                          "color": "\u003ditems[props.lightitem].state \u003d\u003d\u003d \"ON\" ? \"yellow\": \"white\"",
                          "height": "40px",
                          "iconF7": "lightbulb",
                          "iconSize": "25px"
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "100%",
                      "height": "40%",
                      "justify-items": "center"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-image",
                        "config": {
                          "height": 200.0,
                          "url": "\u003dprops.urllivestream ? props.urllivestream : \"https://www.flaticon.com/svg/vstatic/svg/3964/3964391.svg?token\u003dexp\u003d1614265385~hmac\u003d9a01747702e3f44a515d0d898b3f13fc\"",
                          "width": 290.0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "component": "f7-progressbar",
            "config": {
              "color": "\u003ditems[props.timeleftitem].state \u003e 0 ? \"multi\" : \"red\"",
              "infinite": "\u003ditems[props.timeleftitem].state \u003e 0 ? true : false",
              "style": {
                "border-top-left-radius": "100px 25px",
                "border-top-right-radius": "100px 25px",
                "height": "5px",
                "left": 0.0,
                "margin": "auto",
                "position": "absolute",
                "right": 0.0,
                "width": "95%"
              }
            }
          }
        ]
      }
    }
  },
  "3D-Print-Mobile_1": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "3D-Print-Mobile_1",
      "tags": [],
      "props": {
        "parameters": [
          {
            "description": "icon1 name without \".png\", located in static/icons/ folder",
            "label": "Icon1",
            "name": "iconimage1",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "icon2 name without \".png\", located in static/icons/ folder",
            "label": "Icon2",
            "name": "iconimage2",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set the Power item here",
            "label": "Power",
            "name": "poweritem",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set the Light item here",
            "label": "Light",
            "name": "lightitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Set the height of the Widget",
            "label": "Widget Height",
            "name": "cardheight",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Name your Printer!",
            "label": "Printer Name",
            "name": "printername",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set item for Bed Temperature here",
            "label": "Bed Temperature",
            "name": "bedtempitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set item for Hotend Temperature here",
            "label": "Hotend Temperature",
            "name": "hotendtempitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set item for Time Left here",
            "label": "Time Left",
            "name": "timeleftitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Set item for Progress here",
            "label": "Progress",
            "name": "progressitem",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Set the url of the live stream here",
            "label": "Url live stream",
            "name": "urllivestream",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "rgba or HEX",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Page which will be opened as popup",
            "label": "Page ID",
            "name": "page",
            "required": false
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:37:38 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "--weather-card-border-radius": "20px",
          "--weather-card-color": "\u003d(!props.fontColor) ? \u0027255,255,255\u0027 : props.fontColor",
          "--weather-card-text-color": "rgba(var(--weather-card-color),1)",
          "--weather-card-text-shadow-color": "\u003d(!props.textShadowColor) ? \u00270,0,0\u0027 : props.textShadowColor",
          "--weather-font-size-large": "26px",
          "--weather-font-size-normal": "18px",
          "--weather-font-size-small": "16px",
          "--weather-font-size-xlarge": "60px",
          "--weather-font-size-xsmall": "14px",
          "--weather-font-size-xxlarge": "70px",
          "--weather-font-size-xxsmall": "12px",
          "--weather-text-shadow-light": "2px 2px rgba(var(--weather-card-text-shadow-color),.15)",
          "--weather-text-shadow-strong": "2px 2px rgba(var(--weather-card-text-shadow-color),.35)",
          "--weather-text-transform-time": "uppercase",
          "-moz-user-select": "none",
          "-ms-user-select": "none",
          "-webkit-user-select": "none",
          "background": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--weather-card-border-radius)",
          "color": "var(--weather-card-text-color)",
          "height": "\u003dprops.cardheight ? props.cardheight : \"180px\"",
          "overflow": "hidden",
          "user-select": "none"
        }
      },
      "slots": {
        "default": [
          {
            "component": "f7-block",
            "config": {
              "class": [
                "no-padding",
                "no-margin"
              ],
              "style": {
                "height": "100%",
                "left": 0.0,
                "position": "absolute",
                "top": 0.0,
                "width": "100%"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "display": "grid",
                      "height": "20%",
                      "justify-content": "center",
                      "justify-items": "center",
                      "margin-top": "15px"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "18px",
                            "grid-column": 1.0,
                            "padding-top": "0px"
                          },
                          "text": "\u003dprops.printername ? props.printername : \"Printer Name\""
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "30% 70%",
                      "height": "13%"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-image",
                        "config": {
                          "height": 14.0,
                          "style": {
                            "align-self": "center",
                            "place-self": "end"
                          },
                          "url": "\u003d\u0027/static/icons/\u0027 + props.iconimage2 + \u0027.png\u0027",
                          "width": 14.0
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "16px",
                            "grid-column": 2.0,
                            "margin-left": "5px"
                          },
                          "text": "\u003ditems[props.bedtempitem].state ? items[props.bedtempitem].state + \" â„ƒ\" : \"Name\""
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "30% 70%",
                      "height": "13%"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-image",
                        "config": {
                          "height": 14.0,
                          "style": {
                            "align-self": "center",
                            "place-self": "end"
                          },
                          "url": "\u003d\u0027/static/icons/\u0027 + props.iconimage1 + \u0027.png\u0027",
                          "width": 14.0
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "16px",
                            "grid-column": 2.0,
                            "margin-left": "5px"
                          },
                          "text": "\u003ditems[props.hotendtempitem].state ? items[props.hotendtempitem].state + \" â„ƒ\" : \"Name\""
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "30% 70%",
                      "height": "13%"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-image",
                        "config": {
                          "height": 14.0,
                          "style": {
                            "align-self": "center",
                            "place-self": "end"
                          },
                          "url": "https://iconsplace.com/wp-content/uploads/_icons/ffffff/256/png/time-icon-18-256.png",
                          "width": 14.0
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "16px",
                            "grid-column": 2.0,
                            "margin-left": "5px"
                          },
                          "text": "\u003ditems[props.timeleftitem].state \u003d\u003d \"NULL\" ? \"not printing\" : Math.floor(items[props.timeleftitem].state /3600)+\":\"+ Math.floor(items[props.timeleftitem].state / 60) + \" h\""
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "display": "grid",
                      "grid-template-columns": "50% 50%",
                      "height": "10%",
                      "justify-items": "center",
                      "margin-top": "10px"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-button",
                        "config": {
                          "action": "toggle",
                          "actionCommand": "ON",
                          "actionCommandAlt": "OFF",
                          "actionItem": "\u003dprops.poweritem",
                          "color": "\u003ditems[props.poweritem].state \u003d\u003d\u003d \"ON\" ? \"green\": \"red\"",
                          "height": "40px",
                          "iconF7": "power",
                          "iconSize": "25px"
                        }
                      },
                      {
                        "component": "oh-button",
                        "config": {
                          "action": "toggle",
                          "actionCommand": "ON",
                          "actionCommandAlt": "OFF",
                          "actionItem": "\u003dprops.lightitem",
                          "color": "\u003ditems[props.lightitem].state \u003d\u003d\u003d \"ON\" ? \"yellow\": \"white\"",
                          "height": "40px",
                          "iconF7": "lightbulb",
                          "iconSize": "25px"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "component": "f7-progressbar",
            "config": {
              "color": "\u003ditems[props.timeleftitem].state \u003e 0 ? \"multi\" : \"red\"",
              "infinite": "\u003ditems[props.timeleftitem].state \u003e 0 ? true : false",
              "style": {
                "border-top-left-radius": "100px 25px",
                "border-top-right-radius": "100px 25px",
                "height": "5px",
                "left": 0.0,
                "margin": "auto",
                "position": "absolute",
                "right": 0.0,
                "width": "90%"
              }
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "popup",
              "actionModal": "\u003d\u0027page:\u0027 + props.page",
              "style": {
                "height": "50px",
                "left": "0px",
                "position": "absolute",
                "top": "0px",
                "width": "100%"
              }
            }
          }
        ]
      }
    }
  },
  "Card_Room_Popup+Motion": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Card_Room_Popup+Motion",
      "tags": [
        "motion"
      ],
      "props": {
        "parameters": [
          {
            "label": "Header",
            "name": "text_header",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "icon name without \".png\", located in static/icons/ folder",
            "label": "Icon",
            "name": "iconimage",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "HEX or rgba",
            "label": "Backgroundcolor",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Page which will be opened as popup",
            "label": "Page ID",
            "name": "page",
            "required": false
          },
          {
            "context": "item",
            "description": "select group for status lights",
            "label": "Item",
            "name": "status",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for heating",
            "label": "Item",
            "name": "heating",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for temperature",
            "label": "Item",
            "name": "temp",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for set temperature",
            "label": "Item",
            "name": "settemp",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for humidity",
            "label": "Item",
            "name": "humidity",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for illuminance",
            "label": "Item",
            "name": "illuminance",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for motion state(s)",
            "label": "Item",
            "name": "motion",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for door lock(s)",
            "label": "Item",
            "name": "door_lock",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for blinds group (SUM)",
            "label": "Item",
            "name": "blinds_closed",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for speaker(s)",
            "label": "Item",
            "name": "speakers",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for windows(s)",
            "label": "Item",
            "name": "windows",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for numbers of windows",
            "label": "Item",
            "name": "windows_numbers",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for boiler temp",
            "label": "Item",
            "name": "boiler_temp",
            "required": false,
            "type": "TEXT"
          }
        ]
      },
      "timestamp": "Dec 9, 2021, 1:00:56 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "\u003d(items[props.status].state \u003d\u003d\u003d \"ON\") ? \"3px 3px 10px 0px rgba(255,255,255,255)\" : \"var(--f7-card-expandable-box-shadow)\"",
          "class": [
            {
              "padding": "0px"
            }
          ],
          "height": "125px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false
        }
      },
      "slots": {
        "content": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "left": "50px",
                "position": "absolute",
                "top": "-5px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "17px",
                      "font-weight": 600.0,
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.text_header ? props.text_header : \u0027Set Props\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-37px",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "\u003d(items[props.status].state \u003d\u003d\u003d \u0027ON\u0027) ? \u0027lightbulb\u0027 : \u0027lightbulb_slash\u0027",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003d(items[props.status].state \u003d\u003d\u003d \u0027ON\u0027) ? items[props.status].state : \u0027\u0027",
                    "visible": "\u003dprops.status ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "flame",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.heating].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027\u0027 : \u0027\u0027",
                    "visible": "\u003ditems[props.heating].state \u003d\u003d\u003d \u0027ON\u0027"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.motion].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027\u0027 : \u0027\u0027",
                    "visible": "\u003dprops.motion ? true : false"
                  },
                  "slots": {
                    "media": [
                      {
                        "component": "oh-icon",
                        "config": {
                          "icon": "\u003ditems[props.motion].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027motion\u0027 : \u0027\u0027",
                          "style": {
                            "filter": "\u003d\u0027brightness(\u0027 + (themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u00271\u0027 : \u00270.4\u0027) + \u0027)\u0027",
                            "height": "18px"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.windows_numbers].state \u003e 0 ? items[props.windows_numbers].state : \u0027\u0027",
                    "visible": "\u003ditems[props.windows].state \u003d\u003d\u003d \u0027OPEN\u0027 ? true : false"
                  },
                  "slots": {
                    "media": [
                      {
                        "component": "oh-icon",
                        "config": {
                          "icon": "window-open",
                          "style": {
                            "filter": "\u003d\u0027brightness(\u0027 + (themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u00271\u0027 : \u00270.4\u0027) + \u0027)\u0027",
                            "height": "18px"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "\u003ditems[props.door_lock].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027lock_open\u0027 : \u0027lock\u0027",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.door_lock].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027\u0027 : \u0027\u0027",
                    "visible": "\u003dprops.door_lock ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003d(Number(items[props.blinds_closed].state) \u003d\u003d\u003d 0) ? \u0027\u0027 : Math.floor(items[props.blinds_closed].state) + \u0027%\u0027",
                    "visible": "\u003d(Number(Math.floor(items[props.blinds_closed].state)) \u003e 0) ? true : false"
                  },
                  "slots": {
                    "media": [
                      {
                        "component": "oh-icon",
                        "config": {
                          "icon": "\u003d(Number(items[props.blinds_closed].state) \u003d\u003d\u003d 0) ? \u0027cinemascreen-30\u0027 : \u0027cinemascreen-100\u0027",
                          "style": {
                            "filter": "\u003d\u0027brightness(\u0027 + (themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027100\u0027 : \u00270.3\u0027) + \u0027)\u0027",
                            "height": "18px"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "\u003ditems[props.speakers].state \u003d\u003d\u003d \u0027PLAY\u0027 ? \u0027speaker_2\u0027 : \u0027speaker\u0027",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "visible": "\u003ditems[props.speakers].state \u003d\u003d\u003d \u0027PLAY\u0027 ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "sun_min",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.illuminance].displayState",
                    "visible": "\u003dprops.illuminance ? true : false"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-65px",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "thermometer",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003d(items[props.temp].displayState  ? items[props.temp].displayState : items[props.temp].state) +  (props.settemp ? \u0027 (\u0027 + items[props.settemp].state + \u0027)\u0027 : \u0027\u0027)",
                    "visible": "\u003dprops.temp ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "drop",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.humidity].displayState",
                    "visible": "\u003dprops.humidity ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.boiler_temp].state",
                    "visible": "\u003dprops.boiler_temp ? true : false"
                  },
                  "slots": {
                    "media": [
                      {
                        "component": "oh-icon",
                        "config": {
                          "icon": "waterheater2",
                          "style": {
                            "filter": "\u003d\u0027invert(\u0027 + (themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u00271\u0027 : \u00270\u0027) + \u0027)\u0027",
                            "height": "18px"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "component": "oh-image",
            "config": {
              "style": {
                "height": "25px",
                "left": "16px",
                "opacity": 0.7,
                "position": "absolute",
                "top": "10px"
              },
              "url": "\u003d\u0027/static/icons/\u0027 + props.iconimage + \u0027.png\u0027",
              "visible": "\u003dprops.iconimage ? true : false"
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "popup",
              "actionModal": "\u003d\u0027page:\u0027 + props.page",
              "style": {
                "height": "110px",
                "left": "0px",
                "position": "absolute",
                "top": "0px",
                "width": "100%"
              }
            }
          }
        ]
      }
    }
  },
  "Card_Weather_Small_1": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Card_Weather_Small_1",
      "tags": [
        "OpenWeatherMap",
        "allInOne",
        "daily forecast",
        "expandable",
        "hourly forecast",
        "weather"
      ],
      "props": {
        "parameters": [
          {
            "description": "\u003cb\u003eOptional prefix\u003c/b\u003e for item names",
            "label": "Item prefix",
            "name": "itemPrefix",
            "required": false,
            "type": "TEXT",
            "groupName": "general"
          },
          {
            "description": "\u003cb\u003eAdditional prefix\u003c/b\u003e for item names that belongs to another Things channel (valid for \u0027StationName\u0027 as it might differ)",
            "label": "Additional item prefix",
            "name": "itemPrefix2",
            "required": false,
            "type": "TEXT",
            "groupName": "general"
          },
          {
            "description": "The number of hours you want to forecast (\u003cu\u003edefault:\u003c/u\u003e \u003cb\u003e12\u003c/b\u003e)",
            "label": "Number of hours to forecast",
            "name": "forecastHours",
            "required": false,
            "type": "TEXT",
            "groupName": "general"
          },
          {
            "description": "The number of days you want to forecast (\u003cu\u003edefault:\u003c/u\u003e \u003cb\u003e3\u003c/b\u003e)",
            "label": "Number of days to forecast",
            "name": "forecastDays",
            "required": false,
            "type": "TEXT",
            "groupName": "general"
          },
          {
            "description": "Show all informations at once (increases height)",
            "label": "Big card",
            "name": "bigCard",
            "required": false,
            "type": "BOOLEAN",
            "groupName": "lookandfeel"
          },
          {
            "description": "Use this only on screens with a very small view-width",
            "label": "Mobile optimized",
            "name": "mobile",
            "required": false,
            "type": "BOOLEAN",
            "groupName": "lookandfeel",
            "advanced": true
          },
          {
            "description": "Set a background-image which will be shown during the day (if empty it will fall back to the linear-gradient)",
            "label": "Background image-url (day-cycle)",
            "name": "backgroundUrlDay",
            "required": false,
            "type": "TEXT",
            "groupName": "lookandfeel"
          },
          {
            "description": "Set a background-image which will be shown during the night (if empty it will fall back to the linear-gradient)",
            "label": "Background image-url (night-cycle)",
            "name": "backgroundUrlNight",
            "required": false,
            "type": "TEXT",
            "groupName": "lookandfeel"
          },
          {
            "description": "Activate day \u0026 night Indication on hourly forecast (background color \u0026 sunrise / sunset indicator icon)",
            "label": "Show sunrise \u0026 sunset",
            "name": "sunIndicator",
            "required": false,
            "type": "BOOLEAN",
            "groupName": "lookandfeel"
          },
          {
            "description": "Overwrite the global font-color as rgb (\u003cu\u003edefault:\u003c/u\u003e \u003cb\u003e255,255,255\u003cb\u003e)",
            "label": "Font color (rgb)",
            "name": "fontColor",
            "required": false,
            "type": "TEXT",
            "groupName": "lookandfeel"
          },
          {
            "description": "Overwrite the global text shadow color as rgb (\u003cu\u003edefault:\u003c/u\u003e \u003cb\u003e0,0,0\u003cb\u003e)",
            "label": "Text shadow color(rgb)",
            "name": "textShadowColor",
            "required": false,
            "type": "TEXT",
            "groupName": "lookandfeel"
          },
          {
            "label": "Daytime background indication color",
            "name": "sunIndicatorColorDay",
            "required": false,
            "type": "TEXT",
            "groupName": "lookandfeel",
            "advanced": true
          },
          {
            "label": "Nighttime background indication color",
            "name": "sunIndicatorColorNight",
            "required": false,
            "type": "TEXT",
            "groupName": "lookandfeel",
            "advanced": true
          },
          {
            "description": "Overwrite the station location name",
            "label": "Location title",
            "name": "locationTitle",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "description": "Format of the timestamp below the location-name (\u003cu\u003edefault:\u003c/u\u003e \u003cb\u003eDD. MMMM YYYY\u003c/b\u003e)\u003cbr\u003eVisit \u003ca \u0027https://day.js.org/docs/en/display/format\u0027\u003ehttps://day.js.org/docs/en/display/format\u003c/a\u003e for more informations.",
            "label": "Timestamp format",
            "name": "dateScheme",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "description": "Acitvate 24-hour time-format (\u003cu\u003edefault:\u003c/u\u003e \u003cb\u003e12-hour clock-format\u003c/b\u003e)",
            "label": "24h hour-format",
            "name": "dateFormat",
            "required": false,
            "type": "BOOLEAN",
            "groupName": "localization"
          },
          {
            "description": "Add suffix to the hourly-forecast timestamp",
            "label": "Custom hour suffix",
            "name": "timestampSuffix",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "label": "Translation \u0027Feel\u0027",
            "name": "wordingFeel",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "label": "Translation \u0027Hourly\u0027",
            "name": "wordingForecastHours",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "label": "Translation \u0027Daily\u0027",
            "name": "wordingForecastDays",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "label": "Translation \u0027%-Precipitation\u0027",
            "name": "wordingForecastPrecib",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "label": "Translation \u0027Now\u0027",
            "name": "wordingNow",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "label": "Translation \u0027Today\u0027",
            "name": "wordingToday",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "label": "Translation \u0027Sunrise at\u0027",
            "name": "wordingSunrise",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          },
          {
            "label": "Translation \u0027Sunset at\u0027",
            "name": "wordingSunset",
            "required": false,
            "type": "TEXT",
            "groupName": "localization"
          }
        ],
        "parameterGroups": [
          {
            "name": "general",
            "label": "General settings"
          },
          {
            "name": "widgetAction",
            "context": "action",
            "label": "Action",
            "description": "Action to perform when the element is clicked (\u003cb\u003eExperimental\u003c/b\u003e)"
          },
          {
            "name": "lookandfeel",
            "label": "Look \u0026 Feel",
            "description": "Everything that influences the look \u0026 feel of the widget"
          },
          {
            "name": "localization",
            "label": "Localization settings",
            "description": "Set alternative wordings \u0026 date pattern"
          }
        ]
      },
      "timestamp": "Dec 9, 2021, 1:02:27 PM",
      "component": "f7-card",
      "config": {
        "class": [
          "padding"
        ],
        "style": {
          "--weather-card-border-radius": "20px",
          "--weather-card-color": "\u003d(!props.fontColor) ? \u0027255,255,255\u0027 : props.fontColor",
          "--weather-card-text-color": "rgba(var(--weather-card-color),1)",
          "--weather-card-text-shadow-color": "\u003d(!props.textShadowColor) ? \u00270,0,0\u0027 : props.textShadowColor",
          "--weather-font-size-large": "26px",
          "--weather-font-size-normal": "18px",
          "--weather-font-size-small": "16px",
          "--weather-font-size-xlarge": "55px",
          "--weather-font-size-xsmall": "14px",
          "--weather-font-size-xxlarge": "70px",
          "--weather-font-size-xxsmall": "12px",
          "--weather-text-shadow-light": "2px 2px rgba(var(--weather-card-text-shadow-color),.15)",
          "--weather-text-shadow-strong": "2px 2px rgba(var(--weather-card-text-shadow-color),.35)",
          "--weather-text-transform-time": "uppercase",
          "-moz-user-select": "none",
          "-ms-user-select": "none",
          "-webkit-user-select": "none",
          "background": "\u003ddayjs().format() \u003e\u003d items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027ForecastToday_Sunrise\u0027].state \u0026\u0026 dayjs().format() \u003c items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027ForecastToday_Sunset\u0027].state ? \u0027linear-gradient(to bottom, #355b8e, #c0d4f0)\u0027 : \u0027linear-gradient(to bottom, #413D8F, #CE9FC8)\u0027",
          "border-radius": "var(--weather-card-border-radius)",
          "color": "var(--weather-card-text-color)",
          "height": "\u003d(props.bigCard) ? \u0027\u0027 : \u0027160px\u0027",
          "overflow": "hidden",
          "user-select": "none"
        }
      },
      "slots": {
        "default": [
          {
            "component": "oh-link",
            "config": {
              "actionPropsParameterGroup": "widgetAction",
              "class": [
                "no-padding",
                "no-margin"
              ],
              "color": "white",
              "style": {
                "height": "100%",
                "left": 0.0,
                "max-height": "192px",
                "position": "absolute",
                "top": 0.0,
                "width": "100%",
                "z-index": 98.0
              },
              "visible": "\u003dprops.widget_action \u0026\u0026 (vars.moreInfo \u003d\u003d\u003d false || !vars.moreInfo) ? true : false"
            }
          },
          {
            "component": "f7-block",
            "config": {
              "class": [
                "no-padding",
                "no-margin"
              ],
              "style": {
                "background": "\u003ddayjs().format() \u003e\u003d items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027ForecastToday_Sunrise\u0027].state \u0026\u0026 dayjs().format() \u003c items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027ForecastToday_Sunset\u0027].state ? \u0027no-repeat 100% / cover url(\u0027 + props.backgroundUrlDay + \u0027)\u0027 : \u0027no-repeat 100% / cover url(\u0027 + props.backgroundUrlNight + \u0027)\u0027",
                "height": "100%",
                "left": 0.0,
                "position": "absolute",
                "top": 0.0,
                "width": "100%"
              }
            }
          },
          {
            "component": "f7-row",
            "config": {
              "visible": "\u003d(!vars.moreInfo) ? true : false"
            },
            "slots": {
              "default": [
                {
                  "component": "f7-col",
                  "config": {
                    "style": {
                      "z-index": 95.0
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "var(--weather-font-size-large)",
                            "font-weight": 600.0,
                            "letter-spacing": ".75px",
                            "overflow": "hidden",
                            "text-overflow": "ellipsis",
                            "text-shadow": "var(--weather-text-shadow-strong)",
                            "white-space": "nowrap"
                          },
                          "text": "\u003d!props.locationTitle ? items[(!props.itemPrefix2 ? (!props.itemPrefix ? \u0027\u0027 : props.itemPrefix) : props.itemPrefix2) + \u0027StationName\u0027].state : props.locationTitle"
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "color": "rgba(var(--weather-card-color),.7)",
                            "font-size": "var(--weather-font-size-xxsmall)",
                            "letter-spacing": ".75px",
                            "overflow": "hidden",
                            "text-overflow": "ellipsis",
                            "text-shadow": "var(--weather-text-shadow-light)",
                            "white-space": "nowrap"
                          },
                          "text": "\u003ddayjs().format(props.dateScheme ? props.dateScheme : \u0027DD. MMMM YYYY\u0027)"
                        }
                      },
                      {
                        "component": "f7-row",
                        "config": {
                          "class": [
                            "align-items-center"
                          ],
                          "style": {
                            "flex-wrap": "nowrap"
                          }
                        },
                        "slots": {
                          "default": [
                            {
                              "component": "f7-icon",
                              "config": {
                                "f7": "\u003d(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002701d\u0027) ? \u0027sun_max_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002701n\u0027) ? \u0027moon_stars_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002702d\u0027) ? \u0027cloud_sun_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002702n\u0027) ? \u0027cloud_moon_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002703d\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002703n\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002704d\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002704n\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002709d\u0027) ? \u0027cloud_heavyrain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002709n\u0027) ? \u0027cloud_heavyrain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002710d\u0027) ? \u0027cloud_sun_rain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002710n\u0027) ? \u0027cloud_moon_rain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002711d\u0027) ? \u0027cloud_sun_bolt_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002711n\u0027) ? \u0027cloud_moon_bolt_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002713d\u0027) ? \u0027cloud_snow_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002713n\u0027) ? \u0027cloud_snow_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002750d\u0027) ? \u0027cloud_fog_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Iconid\u0027].state \u003d\u003d\u003d \u002750n\u0027) ? \u0027cloud_fog_fill\u0027 : \u0027?\u0027",
                                "style": {
                                  "font-size": "var(--weather-font-size-xxlarge)",
                                  "padding-bottom": "5px",
                                  "padding-top": "5px",
                                  "text-shadow": "var(--weather-text-shadow-strong)"
                                }
                              }
                            },
                            {
                              "component": "f7-col",
                              "config": {
                                "visible": "\u003dprops.mobile \u003d\u003d\u003d true"
                              },
                              "slots": {
                                "default": [
                                  {
                                    "component": "Label",
                                    "config": {
                                      "class": [
                                        "padding-left"
                                      ],
                                      "style": {
                                        "font-size": "31px",
                                        "font-weight": 600.0,
                                        "line-height": "31px",
                                        "overflow": "hidden",
                                        "text-overflow": "ellipsis",
                                        "text-shadow": "var(--weather-text-shadow-strong)",
                                        "white-space": "nowrap"
                                      },
                                      "text": "\u003dMath.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Aussentemperatur\u0027].state.split(\u0027 \u0027)[0] * 10) / 10 + \u0027Â°\u0027"
                                    }
                                  },
                                  {
                                    "component": "Label",
                                    "config": {
                                      "class": [
                                        "padding-left"
                                      ],
                                      "style": {
                                        "font-size": "var(--weather-font-size-small)",
                                        "overflow": "hidden",
                                        "text-overflow": "ellipsis",
                                        "text-shadow": "var(--weather-text-shadow-light)",
                                        "white-space": "nowrap"
                                      },
                                      "text": "\u003d((!props.wordingFeel) ? \u0027Feel: \u0027 : props.wordingFeel + \u0027: \u0027) + Math.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Apparenttemperature\u0027].state.split(\u0027 \u0027)[0]) + \u0027Â°\u0027"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "var(--weather-font-size-small)",
                            "overflow": "hidden",
                            "text-overflow": "ellipsis",
                            "white-space": "nowrap"
                          },
                          "text": "\u003ditems[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Condition\u0027].state"
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-col",
                  "config": {
                    "class": [
                      "text-align-right"
                    ],
                    "style": {
                      "align-self": "\u003dprops.bigCard ? \u0027flex-start\u0027 : \u0027flex-end\u0027",
                      "z-index": 95.0
                    },
                    "visible": "\u003d!props.mobile"
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "var(--weather-font-size-xlarge)",
                            "font-weight": 600.0,
                            "line-height": "var(--weather-font-size-xlarge)",
                            "overflow": "hidden",
                            "text-overflow": "ellipsis",
                            "text-shadow": "var(--weather-text-shadow-strong)",
                            "white-space": "nowrap"
                          },
                          "text": "\u003dMath.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Aussentemperatur\u0027].state.split(\u0027 \u0027)[0] * 10) / 10 + \u0027Â°\u0027"
                        }
                      },
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "var(--weather-font-size-normal)",
                            "overflow": "hidden",
                            "text-overflow": "ellipsis",
                            "text-shadow": "var(--weather-text-shadow-light)",
                            "white-space": "nowrap"
                          },
                          "text": "\u003d((!props.wordingFeel) ? \u0027Feel: \u0027 : props.wordingFeel + \u0027: \u0027) + Math.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Apparenttemperature\u0027].state.split(\u0027 \u0027)[0]) + \u0027Â°\u0027"
                        }
                      },
                      {
                        "component": "f7-row",
                        "config": {
                          "class": [
                            "justify-content-flex-end"
                          ],
                          "style": {
                            "flex-wrap": "nowrap",
                            "font-size": "var(--weather-font-size-xsmall)",
                            "text-shadow": "var(--weather-text-shadow-light)"
                          }
                        },
                        "slots": {
                          "default": [
                            {
                              "component": "Label",
                              "config": {
                                "style": {
                                  "overflow": "hidden",
                                  "text-overflow": "ellipsis",
                                  "text-shadow": "var(--weather-text-shadow-light)",
                                  "white-space": "nowrap"
                                },
                                "text": "\u003dMath.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Humidity\u0027].state.split(\u0027 \u0027)[0]) + \u0027 \u0027 + items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Humidity\u0027].state.split(\u0027 \u0027)[1]",
                                "tooltip": "Humidity"
                              }
                            },
                            {
                              "component": "Label",
                              "config": {
                                "style": {
                                  "color": "rgba(var(--weather-card-color),.25)",
                                  "text-shadow": "var(--weather-text-shadow-light)"
                                },
                                "text": ""
                              }
                            },
                            {
                              "component": "Label",
                              "config": {
                                "style": {
                                  "overflow": "hidden",
                                  "text-overflow": "ellipsis",
                                  "text-shadow": "var(--weather-text-shadow-light)",
                                  "white-space": "nowrap"
                                },
                                "text": "\u003dMath.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Windspeed\u0027].state.split(\u0027 \u0027)[0]) + \u0027 \u0027 + items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Current_Windspeed\u0027].state.split(\u0027 \u0027)[1]",
                                "tooltip": "Windspeed"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "variable",
              "actionVariable": "moreInfo",
              "actionVariableValue": true,
              "class": [
                "margin-top",
                "margin-right"
              ],
              "color": "white",
              "colorTheme": "white",
              "iconMaterial": "more_horiz",
              "iconSize": "20px",
              "style": {
                "color": "var(--weather-card-text-color)",
                "font-weight": 600.0,
                "position": "absolute",
                "right": 0.0,
                "top": 0.0,
                "z-index": 99.0
              },
              "visible": "\u003d(props.bigCard) ? false : ((!vars.moreInfo || vars.moreInfo \u003d\u003d\u003d false) ? true : false)"
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "variable",
              "actionVariable": "moreInfo",
              "actionVariableValue": false,
              "class": [
                "margin-top",
                "margin-right"
              ],
              "color": "white",
              "colorTheme": "white",
              "iconMaterial": "close",
              "iconSize": "20px",
              "style": {
                "color": "var(--weather-card-text-color)",
                "font-weight": 600.0,
                "position": "absolute",
                "right": 0.0,
                "top": 0.0,
                "z-index": 99.0
              },
              "visible": "\u003d(props.bigCard) ? false : ((vars.moreInfo || vars.moreInfo \u003d\u003d\u003d true) ? true : false)"
            }
          },
          {
            "component": "f7-block",
            "config": {
              "class": [
                "no-padding",
                "no-margin",
                "align-items-space-between"
              ],
              "visible": "\u003dvars.moreInfo || props.bigCard \u003d\u003d\u003d true"
            },
            "slots": {
              "default": [
                {
                  "component": "f7-segmented",
                  "config": {
                    "strong": true,
                    "style": {
                      "--f7-button-active-text-color": "rgba(var(--weather-card-color),1)",
                      "--f7-button-border-radius": 0.0,
                      "--f7-button-raised-box-shadow": "none",
                      "--f7-button-text-color": "rgba(var(--weather-card-color),.5)",
                      "--f7-segmented-strong-button-active-bg-color": "transparent",
                      "--f7-segmented-strong-button-active-box-shadow": "0px 4px 0 -1px rgba(var(--weather-card-color),1)",
                      "--f7-segmented-strong-button-active-text-color": "rgba(var(--weather-card-color),1)",
                      "--f7-segmented-strong-padding": "3px",
                      "--f7-segmented-strong-text-color": "rgba(var(--weather-card-color),.5)",
                      "align-items": "flex-end",
                      "background": "transparent",
                      "padding-top": "\u003d(props.bigCard) ? \u002716px\u0027 : \u00270\u0027",
                      "width": "\u003d(props.bigCard) ? \u0027100%\u0027 : \u0027calc(100% - 38px)\u0027",
                      "z-index": 999.0
                    },
                    "textColor": "white"
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-button",
                        "config": {
                          "action": "variable",
                          "actionVariable": "tab",
                          "actionVariableValue": "hourly_forecast",
                          "active": "\u003dvars.tab \u003d\u003d\u003d \u0027hourly_forecast\u0027",
                          "color": "var(--weather-card-text-color)",
                          "text": "\u003d(!props.wordingForecastHours) ? \u0027Hourly\u0027 : props.wordingForecastHours"
                        }
                      },
                      {
                        "component": "oh-button",
                        "config": {
                          "action": "variable",
                          "actionVariable": "tab",
                          "actionVariableValue": "daily_forecast",
                          "active": "\u003dvars.tab \u003d\u003d\u003d \u0027daily_forecast\u0027",
                          "color": "var(--weather-card-text-color)",
                          "text": "\u003d(!props.wordingForecastDays) ? \u0027Daily\u0027 : props.wordingForecastDays"
                        }
                      },
                      {
                        "component": "oh-button",
                        "config": {
                          "action": "variable",
                          "actionVariable": "tab",
                          "actionVariableValue": "precip_forecast",
                          "active": "\u003dvars.tab \u003d\u003d\u003d \u0027precip_forecast\u0027",
                          "color": "var(--weather-card-text-color)",
                          "text": "\u003d(!props.wordingForecastPrecib) ? \u0027%-Precipitation\u0027 : props.wordingForecastPrecib"
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-block",
                  "config": {
                    "class": [
                      "no-padding"
                    ],
                    "style": {
                      "border-bottom": "4px solid rgba(var(--weather-card-color),.5)",
                      "margin-left": "4px",
                      "margin-right": "4px"
                    }
                  }
                },
                {
                  "component": "f7-swiper",
                  "config": {
                    "class": [
                      "padding-top"
                    ],
                    "navigation": true,
                    "params": {
                      "breakpoints": {
                        "0": {
                          "slidesPerView": 1.0
                        },
                        "240": {
                          "slidesPerView": 2.0
                        },
                        "320": {
                          "slidesPerView": 3.0
                        },
                        "480": {
                          "slidesPerView": 4.0
                        },
                        "640": {
                          "slidesPerView": 5.0
                        }
                      },
                      "grabCursor": true,
                      "initalSlide": 0.0,
                      "keyboard": true,
                      "mousewheel": true,
                      "observeSlideChildren": true,
                      "observer": true,
                      "runCallbacksOnInit": true,
                      "spaceBetween": 5.0,
                      "updateOnWindowResize": true,
                      "watchOverflow": true
                    },
                    "style": {
                      "--swiper-navigation-color": "var(--weather-card-text-color)",
                      "--swiper-navigation-size": "30px"
                    },
                    "visible": "\u003dvars.tab \u003d\u003d\u003d \u0027hourly_forecast\u0027 || !vars.tab"
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-repeater",
                        "config": {
                          "for": "hour",
                          "fragment": true,
                          "rangeStart": 0.0,
                          "rangeStop": "\u003d(!props.forecastHours) ? 12 : Number(props.forecastHours)",
                          "sourceType": "range"
                        },
                        "slots": {
                          "default": [
                            {
                              "component": "f7-swiper-slide",
                              "config": {
                                "expandable": true,
                                "style": {
                                  "background": "\u003d(props.sunIndicator) ? ((dayjs().add(loop.hour,\u0027hour\u0027).format() \u003e\u003d items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state \u0026\u0026 dayjs().add(loop.hour,\u0027hour\u0027).format() \u003c\u003d items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state) ? (!props.sunIndicatorColorDay ? \u0027rgba(255,255,255,.2)\u0027 : props.sunIndicatorColorDay) : (!props.sunIndicatorColorNight ? \u0027rgba(41,109,152,.2)\u0027 : props.sunIndicatorColorNight)) : \u0027none\u0027",
                                  "border-radius": "5px"
                                }
                              },
                              "slots": {
                                "default": [
                                  {
                                    "component": "f7-icon",
                                    "config": {
                                      "f7": "sun_max_fill",
                                      "size": "17px",
                                      "style": {
                                        "color": "var(--weather-card-text-color)",
                                        "cursor": "pointer",
                                        "position": "absolute",
                                        "right": "3px",
                                        "top": "3px",
                                        "z-index": 998.0
                                      },
                                      "tooltip": "\u003d((!props.wordingSunrise) ? \u0027Sunrise at \u0027 : props.wordingSunrise + \u0027 \u0027) + ((!props.dateFormat) ? dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state).format(\u0027h:mm A\u0027) : dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state).format(\u0027H:mm\u0027) + (!props.timestampSuffix ? \u0027\u0027 : \u0027 \u0027 + props.timestampSuffix) ) + \u0027\u003cbr\u003e\u003cb\u003e\u0027 + dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state).fromNow() + \u0027\u003c/b\u003e\u0027",
                                      "visible": "\u003d(dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027hour\u0027).format() \u003d\u003d\u003d dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state).startOf(\u0027hour\u0027).format() \u0026\u0026 props.sunIndicator \u003d\u003d\u003d true)"
                                    }
                                  },
                                  {
                                    "component": "f7-icon",
                                    "config": {
                                      "f7": "moon_fill",
                                      "size": "17px",
                                      "style": {
                                        "color": "var(--weather-card-text-color)",
                                        "cursor": "pointer",
                                        "position": "absolute",
                                        "right": "3px",
                                        "top": "3px",
                                        "z-index": 998.0
                                      },
                                      "tooltip": "\u003d((!props.wordingSunset) ? \u0027Sunset at \u0027 : props.wordingSunset + \u0027 \u0027) + ((!props.dateFormat) ? dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state).format(\u0027h:mm A\u0027) : dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state).format(\u0027H:mm\u0027) + (!props.timestampSuffix ? \u0027\u0027 : \u0027 \u0027 + props.timestampSuffix) ) + \u0027\u003cbr\u003e\u003cb\u003e\u0027 + dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state).fromNow() + \u0027\u003c/b\u003e\u0027",
                                      "visible": "\u003d(dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027hour\u0027).format() \u003d\u003d\u003d dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state).startOf(\u0027hour\u0027).format() \u0026\u0026 props.sunIndicator \u003d\u003d\u003d true)"
                                    }
                                  },
                                  {
                                    "component": "f7-row",
                                    "config": {
                                      "class": [
                                        "justify-content-center"
                                      ]
                                    },
                                    "slots": {
                                      "default": [
                                        {
                                          "component": "Label",
                                          "config": {
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "font-size": "var(--weather-font-size-xsmall)",
                                              "font-weight": 700.0,
                                              "text-shadow": "var(--weather-text-shadow-light)",
                                              "text-transform": "var(--weather-text-transform-time)"
                                            },
                                            "text": "\u003d(loop.hour \u003d\u003d\u003d 0) ? ((!props.wordingNow) ? \u0027Now\u0027 : props.wordingNow) : ((!props.dateFormat) ? dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027hour\u0027).format(\u0027h A\u0027) : dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027hour\u0027).format(\u0027H\u0027)) + (!props.timestampSuffix ? \u0027\u0027 : \u0027 \u0027 + props.timestampSuffix)"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "component": "f7-col",
                                    "config": {
                                      "class": [
                                        "text-align-center"
                                      ]
                                    },
                                    "slots": {
                                      "default": [
                                        {
                                          "component": "f7-icon",
                                          "config": {
                                            "f7": "\u003d(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002701d\u0027) ? \u0027sun_max_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002701n\u0027) ? \u0027moon_stars_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002702d\u0027) ? \u0027cloud_sun_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002702n\u0027) ? \u0027cloud_moon_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002703d\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002703n\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002704d\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002704n\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002709d\u0027) ? \u0027cloud_heavyrain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002709n\u0027) ? \u0027cloud_heavyrain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002710d\u0027) ? \u0027cloud_sun_rain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002710n\u0027) ? \u0027cloud_moon_rain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002711d\u0027) ? \u0027cloud_sun_bolt_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002711n\u0027) ? \u0027cloud_moon_bolt_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002713d\u0027) ? \u0027cloud_snow_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002713n\u0027) ? \u0027cloud_snow_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002750d\u0027) ? \u0027cloud_fog_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002750n\u0027) ? \u0027cloud_fog_fill\u0027 : \u0027?\u0027",
                                            "size": 48.0,
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "padding-bottom": "5px",
                                              "padding-top": "5px",
                                              "text-shadow": "var(--weather-text-shadow-strong)"
                                            }
                                          }
                                        },
                                        {
                                          "component": "Label",
                                          "config": {
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "font-size": "var(--weather-font-size-normal)",
                                              "font-weight": 400.0,
                                              "text-shadow": "var(--weather-text-shadow-light)"
                                            },
                                            "text": "\u003dMath.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + ((loop.hour \u003d\u003d\u003d 0) ? \u0027Current\u0027 : \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1))) + \u0027_Temperature\u0027].state.split(\u0027 \u0027)[0]) + \u0027Â°\u0027"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-swiper",
                  "config": {
                    "class": [
                      "padding-top"
                    ],
                    "navigation": true,
                    "params": {
                      "breakpoints": {
                        "0": {
                          "slidesPerView": 1.0
                        },
                        "210": {
                          "slidesPerView": "\u003d(!props.forecastDays) ? 2 : ((props.forecastDays \u003c 2) ? Math.round(Number(props.forecastDays) + 1) : 2)"
                        },
                        "480": {
                          "slidesPerView": "\u003d(!props.forecastDays) ? 3 : ((props.forecastDays \u003c 3) ? Math.round(Number(props.forecastDays) + 1) : 3)"
                        },
                        "640": {
                          "slidesPerView": "\u003d(!props.forecastDays) ? 4 : ((props.forecastDays \u003c 4) ? Math.round(Number(props.forecastDays) + 1) : 4)"
                        }
                      },
                      "grabCursor": true,
                      "initalSlide": 0.0,
                      "keyboard": true,
                      "mousewheel": true,
                      "observeSlideChildren": true,
                      "observer": true,
                      "spaceBetween": 5.0,
                      "updateOnWindowResize": true,
                      "watchOverflow": true
                    },
                    "style": {
                      "--swiper-navigation-color": "var(--weather-card-text-color)",
                      "--swiper-navigation-size": "30px"
                    },
                    "visible": "\u003dvars.tab \u003d\u003d\u003d \u0027daily_forecast\u0027"
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-repeater",
                        "config": {
                          "for": "day",
                          "fragment": true,
                          "rangeStart": 0.0,
                          "rangeStop": "\u003d(!props.forecastDays) ? 3 : Number(props.forecastDays)",
                          "sourceType": "range"
                        },
                        "slots": {
                          "default": [
                            {
                              "component": "f7-swiper-slide",
                              "config": {
                                "class": "text-align-center"
                              },
                              "slots": {
                                "default": [
                                  {
                                    "component": "f7-row",
                                    "config": {
                                      "class": [
                                        "justify-content-center",
                                        "align-items-center"
                                      ]
                                    },
                                    "slots": {
                                      "default": [
                                        {
                                          "component": "Label",
                                          "config": {
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "font-size": "var(--weather-font-size-xsmall)",
                                              "font-weight": 700.0,
                                              "text-shadow": "var(--weather-text-shadow-light)",
                                              "text-transform": "var(--weather-text-transform-time)"
                                            },
                                            "text": "\u003d(loop.day \u003d\u003d\u003d 0) ? ((!props.wordingToday) ? \u0027Today\u0027 : props.wordingToday) : dayjs().add(loop.day,\u0027day\u0027).startOf(\u0027day\u0027).format(\u0027dddd\u0027)"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "component": "f7-icon",
                                    "config": {
                                      "f7": "\u003d(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002701d\u0027) ? \u0027sun_max_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002701n\u0027) ? \u0027moon_stars_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002702d\u0027) ? \u0027cloud_sun_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002702n\u0027) ? \u0027cloud_moon_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002703d\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002703n\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002704d\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002704n\u0027) ? \u0027cloud_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002709d\u0027) ? \u0027cloud_heavyrain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002709n\u0027) ? \u0027cloud_heavyrain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002710d\u0027) ? \u0027cloud_sun_rain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002710n\u0027) ? \u0027cloud_moon_rain_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002711d\u0027) ? \u0027cloud_sun_bolt_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002711n\u0027) ? \u0027cloud_moon_bolt_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002713d\u0027) ? \u0027cloud_snow_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002713n\u0027) ? \u0027cloud_snow_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002750d\u0027) ? \u0027cloud_fog_fill\u0027 : (items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + loop.day_idx))) + \u0027_Iconid\u0027].state \u003d\u003d\u003d \u002750n\u0027) ? \u0027cloud_fog_fill\u0027 : \u0027?\u0027",
                                      "size": 48.0,
                                      "style": {
                                        "color": "var(--weather-card-text-color)",
                                        "padding-bottom": "5px",
                                        "padding-top": "5px",
                                        "text-shadow": "var(--weather-text-shadow-strong)"
                                      }
                                    }
                                  },
                                  {
                                    "component": "f7-row",
                                    "config": {
                                      "class": [
                                        "justify-content-center"
                                      ]
                                    },
                                    "slots": {
                                      "default": [
                                        {
                                          "component": "Label",
                                          "config": {
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "font-size": "var(--weather-font-size-normal)",
                                              "font-weight": 400.0,
                                              "text-shadow": "var(--weather-text-shadow-light)"
                                            },
                                            "text": "\u003dMath.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + ((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + (loop.day_idx))) + \u0027_Maxtemperature\u0027].state.split(\u0027 \u0027)[0])+\u0027Â°\u0027"
                                          }
                                        },
                                        {
                                          "component": "Label",
                                          "config": {
                                            "style": {
                                              "color": "rgba(255,255,255,.2)",
                                              "font-size": "var(--weather-font-size-normal)"
                                            },
                                            "text": " | "
                                          }
                                        },
                                        {
                                          "component": "Label",
                                          "config": {
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "font-size": "var(--weather-font-size-normal)",
                                              "font-weight": 400.0,
                                              "text-shadow": "var(--weather-text-shadow-light)"
                                            },
                                            "text": "\u003dMath.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + ((loop.day \u003d\u003d\u003d 0) ? \u0027Today\u0027 : ((loop.day \u003d\u003d\u003d 1) ? \u0027Tomorrow\u0027 : \u0027Day\u0027 + (loop.day_idx))) + \u0027_Mintemperature\u0027].state.split(\u0027 \u0027)[0])+\u0027Â°\u0027"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-swiper",
                  "config": {
                    "class": [
                      "padding-top"
                    ],
                    "navigation": true,
                    "params": {
                      "breakpoints": {
                        "0": {
                          "slidesPerView": 1.0
                        },
                        "240": {
                          "slidesPerView": 2.0
                        },
                        "320": {
                          "slidesPerView": 3.0
                        },
                        "480": {
                          "slidesPerView": 4.0
                        },
                        "640": {
                          "slidesPerView": 5.0
                        }
                      },
                      "grabCursor": true,
                      "initalSlide": 0.0,
                      "keyboard": true,
                      "mousewheel": true,
                      "observeSlideChildren": true,
                      "observer": true,
                      "runCallbacksOnInit": true,
                      "spaceBetween": 5.0,
                      "updateOnWindowResize": true,
                      "watchOverflow": true
                    },
                    "style": {
                      "--swiper-navigation-color": "var(--weather-card-text-color)",
                      "--swiper-navigation-size": "30px"
                    },
                    "visible": "\u003dvars.tab \u003d\u003d\u003d \u0027precip_forecast\u0027"
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-repeater",
                        "config": {
                          "for": "hour",
                          "fragment": true,
                          "rangeStart": 0.0,
                          "rangeStop": "\u003d(props.forecastHours \u003d\u003d\u003d undefined) ? 12 : Number(props.forecastHours)",
                          "sourceType": "range"
                        },
                        "slots": {
                          "default": [
                            {
                              "component": "f7-swiper-slide",
                              "config": {
                                "expandable": true,
                                "id": "\u003dloop.hour_idx",
                                "style": {
                                  "background": "\u003d(props.sunIndicator) ? ((dayjs().add(loop.hour,\u0027hour\u0027).format() \u003e\u003d items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state \u0026\u0026 dayjs().add(loop.hour,\u0027hour\u0027).format() \u003c\u003d items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state) ? (!props.sunIndicatorColorDay ? \u0027rgba(255,255,255,.2)\u0027 : props.sunIndicatorColorDay) : (!props.sunIndicatorColorNight ? \u0027rgba(41,109,152,.2)\u0027 : props.sunIndicatorColorNight)) : \u0027none\u0027",
                                  "border-radius": "5px"
                                }
                              },
                              "slots": {
                                "default": [
                                  {
                                    "component": "f7-icon",
                                    "config": {
                                      "f7": "sun_max_fill",
                                      "size": "17px",
                                      "style": {
                                        "color": "var(--weather-card-text-color)",
                                        "cursor": "pointer",
                                        "position": "absolute",
                                        "right": "3px",
                                        "top": "3px",
                                        "z-index": 998.0
                                      },
                                      "tooltip": "\u003d((!props.wordingSunrise) ? \u0027Sunrise at \u0027 : props.wordingSunrise + \u0027 \u0027) + ((!props.dateFormat) ? dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state).format(\u0027h:mm A\u0027) : dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state).format(\u0027H:mm\u0027) + (!props.timestampSuffix ? \u0027\u0027 : \u0027 \u0027 + props.timestampSuffix) ) + \u0027\u003cbr\u003e\u003cb\u003e\u0027 + dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state).fromNow() + \u0027\u003c/b\u003e\u0027",
                                      "visible": "\u003d(dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027hour\u0027).format() \u003d\u003d\u003d dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunrise\u0027].state).startOf(\u0027hour\u0027).format() \u0026\u0026 props.sunIndicator \u003d\u003d\u003d true)"
                                    }
                                  },
                                  {
                                    "component": "f7-icon",
                                    "config": {
                                      "f7": "moon_fill",
                                      "size": "17px",
                                      "style": {
                                        "color": "var(--weather-card-text-color)",
                                        "cursor": "pointer",
                                        "position": "absolute",
                                        "right": "3px",
                                        "top": "3px",
                                        "z-index": 998.0
                                      },
                                      "tooltip": "\u003d((!props.wordingSunset) ? \u0027Sunset at \u0027 : props.wordingSunset + \u0027 \u0027) + ((!props.dateFormat) ? dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state).format(\u0027h:mm A\u0027) : dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state).format(\u0027H:mm\u0027) + (!props.timestampSuffix ? \u0027\u0027 : \u0027 \u0027 + props.timestampSuffix) ) + \u0027\u003cbr\u003e\u003cb\u003e\u0027 + dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state).fromNow() + \u0027\u003c/b\u003e\u0027",
                                      "visible": "\u003d(dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027hour\u0027).format() \u003d\u003d\u003d dayjs(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027Forecast\u0027 + (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).format() ? \u0027Today\u0027 : (dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027day\u0027).format() \u003d\u003d\u003d dayjs().startOf(\u0027day\u0027).add(1,\u0027day\u0027).format() ? \u0027Tomorrow\u0027 : \u0027Day2\u0027)) + \u0027_Sunset\u0027].state).startOf(\u0027hour\u0027).format() \u0026\u0026 props.sunIndicator \u003d\u003d\u003d true)"
                                    }
                                  },
                                  {
                                    "component": "f7-row",
                                    "config": {
                                      "class": [
                                        "justify-content-center",
                                        "align-items-center"
                                      ]
                                    },
                                    "slots": {
                                      "default": [
                                        {
                                          "component": "Label",
                                          "config": {
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "font-size": "var(--weather-font-size-xsmall)",
                                              "font-weight": 700.0,
                                              "text-shadow": "var(--weather-text-shadow-light)",
                                              "text-transform": "var(--weather-text-transform-time)"
                                            },
                                            "text": "\u003d(loop.hour \u003d\u003d\u003d 0) ? ((!props.wordingNow) ? \u0027Now\u0027 : props.wordingNow) : ((!props.dateFormat) ? dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027hour\u0027).format(\u0027h A\u0027) : dayjs().add(loop.hour,\u0027hour\u0027).startOf(\u0027hour\u0027).format(\u0027H\u0027)) + (!props.timestampSuffix ? \u0027\u0027 : \u0027 \u0027 + props.timestampSuffix)"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "component": "f7-col",
                                    "config": {
                                      "class": [
                                        "justify-content-center",
                                        "align-items-center",
                                        "text-align-center"
                                      ]
                                    },
                                    "slots": {
                                      "default": [
                                        {
                                          "component": "f7-icon",
                                          "config": {
                                            "f7": "umbrella_fill",
                                            "size": 48.0,
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "padding-bottom": "5px",
                                              "padding-top": "5px",
                                              "text-shadow": "var(--weather-text-shadow-strong)"
                                            }
                                          }
                                        },
                                        {
                                          "component": "Label",
                                          "config": {
                                            "style": {
                                              "color": "var(--weather-card-text-color)",
                                              "font-size": "var(--weather-font-size-normal)",
                                              "font-weight": 400.0,
                                              "text-shadow": "var(--weather-text-shadow-light)"
                                            },
                                            "text": "\u003dMath.round(items[((!props.itemPrefix) ? \u0027\u0027 : props.itemPrefix) + \u0027ForecastHours\u0027 + ((loop.hour_idx+1 \u003c 10 ? \u00270\u0027+(loop.hour_idx+1) : loop.hour_idx+1)) + \u0027_Precipprobability\u0027].state.split(\u0027 \u0027)[0]) + \u0027%\u0027"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Cell_Card_1": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Cell_Card_1",
      "tags": [],
      "props": {
        "parameters": [
          {
            "description": "Small title on top of the card",
            "label": "Title",
            "name": "title",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Header big sized",
            "label": "Header",
            "name": "header",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Icon on top of the card (only f7 icons (without f7:))",
            "label": "Icon",
            "name": "icon",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "rgba or HEX",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item to control",
            "label": "Item",
            "name": "item",
            "required": false,
            "type": "TEXT"
          },
          {
            "label": "Command to send",
            "name": "command",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:01:30 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "\u003d(items[props.item].state \u003d\u003d\u003d \"ON\") ? \"3px 3px 10px 0px rgba(255,255,255,255)\" : \"var(--f7-card-expandable-box-shadow)\"",
          "class": [
            {
              "padding": "0px"
            }
          ],
          "height": "100px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false
        }
      },
      "slots": {
        "content": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "display": "flex",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute",
                "top": "-5px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "\u003dprops.icon",
                    "size": 18.0,
                    "style": {
                      "margin-right": "10px"
                    },
                    "visible": "\u003dprops.icon ? true : false"
                  }
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "12px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.title ? props.title : \u0027\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-15px",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "17px",
                      "font-weight": 600.0,
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.header ? props.header : \u0027Set Props\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "command",
              "actionCommand": "\u003dprops.command",
              "actionFeedback": "Done!",
              "actionItem": "\u003dprops.item",
              "style": {
                "actionPosition": "center",
                "height": "100px",
                "left": 0.0,
                "position": "absolute",
                "top": 0.0,
                "width": "100%"
              }
            }
          }
        ]
      }
    }
  },
  "Cell_Light_Card_1": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Cell_Light_Card_1",
      "tags": [
        "Schalter\u0026Schieberegler"
      ],
      "props": {
        "parameters": [
          {
            "description": "Small title on top of the card",
            "label": "Title",
            "name": "title",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Header big sized",
            "label": "Header",
            "name": "header",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Icon on top of the card (only f7 icons (without f7:))",
            "label": "Icon",
            "name": "icon",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "rgba or HEX",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item to control on/off",
            "label": "Item",
            "name": "item_schalter",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item to control brightness",
            "label": "Item",
            "name": "item_brightness",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:22:51 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "5px 5px 10px 1px rgba(0,0,0,0.1)",
          "height": "120px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false,
          "padding": "0px"
        }
      },
      "slots": {
        "content": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "display": "flex",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute",
                "top": "-5px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "\u003dprops.icon",
                    "size": 18.0,
                    "style": {
                      "margin-right": "10px"
                    },
                    "visible": "\u003dprops.icon ? true : false"
                  }
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "12px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.title ? props.title : \u0027\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-15px",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "17px",
                      "font-weight": 600.0,
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.header ? props.header : \u0027Set Props\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "oh-slider",
            "config": {
              "item": "\u003dprops.item_brightness",
              "max": 100.0,
              "min": 0.0,
              "style": {
                "--f7-range-bar-border-radius": "8px",
                "--f7-range-bar-size": "8px",
                "--f7-range-knob-box-shadow": "0 2px 4px rgba(0, 0, 0, 0.3)",
                "--f7-range-knob-size": "20px",
                "bottom": "-75px",
                "left": "20px",
                "position": "absolute",
                "width": "calc(100% - 40px)"
              }
            }
          },
          {
            "component": "oh-toggle",
            "config": {
              "item": "\u003dprops.item_schalter",
              "style": {
                "position": "absolute",
                "right": "20px",
                "top": "15px"
              }
            }
          }
        ]
      }
    }
  },
  "Cell_Light_Color_Card_2": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Cell_Light_Color_Card_2",
      "tags": [
        "Schalter \u0026 Farbauswahl"
      ],
      "props": {
        "parameters": [
          {
            "description": "Small title on top of the card",
            "label": "Title",
            "name": "title",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Header big sized",
            "label": "Header",
            "name": "header",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "icon name without \".png\", located in static/icons/ folder",
            "label": "Icon",
            "name": "iconimage",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "rgba or HEX",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item to control on/off",
            "label": "Item ON OFF",
            "name": "item_schalter",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item to control color",
            "label": "Item light color",
            "name": "item_color",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:23:17 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "5px 5px 10px 1px rgba(0,0,0,0.1)",
          "height": "165px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false,
          "padding": "0px"
        }
      },
      "slots": {
        "default": [
          {
            "component": "f7-card-content",
            "config": {
              "class": [
                "display-flex",
                "flex-direction-column",
                "justify-content-flex-start",
                "align-items-left"
              ],
              "style": {
                "--f7-color-picker-slider-knob-size": "20px",
                "--f7-color-picker-slider-size": "18px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "display": "flex",
                      "flex-direction": "row",
                      "left": "40px",
                      "position": "absolute",
                      "top": "10px"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "12px",
                            "margin-top": "0px"
                          },
                          "text": "\u003dprops.title ? props.title : \u0027\u0027"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "class": [
                "no-padding"
              ],
              "style": {
                "flex-direction": "row",
                "left": "10px",
                "position": "absolute",
                "top": "40px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "17px",
                      "font-weight": 600.0,
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.header ? props.header : \u0027Set Props\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "class": [
                "no-padding"
              ],
              "style": {
                "--f7-color-picker-slider-knob-size": "15px",
                "--f7-color-picker-slider-size": "8px",
                "--f7-range-bar-active-bg-color": "transparent",
                "--f7-range-bar-bg-color": "linear-gradient(to right, rgba(246,158,81,0.8), rgba(246,158,81,0))",
                "--f7-range-bar-border-radius": "10px",
                "--f7-range-bar-size": "12px",
                "--f7-range-knob-box-shadow": "0 2px 4px rgba(0, 0, 0, 0.3)",
                "--f7-range-knob-size": "20px",
                "--f7-range-label-text-color": "black",
                "flex-direction": "row",
                "left": "10px",
                "margin-top": "0px",
                "position": "absolute",
                "top": "70px",
                "width": "calc(100% - 100px)",
                "z-index": "99 !important"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "oh-colorpicker",
                  "config": {
                    "color": "red",
                    "item": "\u003dprops.item_color",
                    "label": true,
                    "modules": [
                      "hsb-sliders"
                    ]
                  }
                }
              ]
            }
          },
          {
            "component": "oh-toggle",
            "config": {
              "item": "\u003dprops.item_schalter",
              "style": {
                "position": "absolute",
                "right": "90px",
                "top": "15px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "0,100,100",
              "actionItem": "\u003dprops.item_color",
              "iconColor": "red",
              "iconF7": "app_fill",
              "iconSize": 34.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "35px",
                "top": "10px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "15,100,100",
              "actionItem": "\u003dprops.item_color",
              "iconColor": "deeporange",
              "iconF7": "app_fill",
              "iconSize": 34.0,
              "style": {
                "background": "transparent",
                "height": "34px",
                "position": "absolute",
                "right": "35px",
                "top": "45px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "30,100,100",
              "actionItem": "\u003dprops.item_color",
              "iconColor": "orange",
              "iconF7": "app_fill",
              "iconSize": 34.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "35px",
                "top": "80px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "60,100,100",
              "actionItem": "\u003dprops.item_color",
              "iconColor": "yellow",
              "iconF7": "app_fill",
              "iconSize": 34.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "35px",
                "top": "115px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "300,100,100",
              "actionItem": "\u003dprops.item_color",
              "iconColor": "purple",
              "iconF7": "app_fill",
              "iconSize": 34.0,
              "style": {
                "background": "transparent",
                "height": "33px",
                "position": "absolute",
                "right": "0px",
                "top": "10px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "240,100,100",
              "actionItem": "\u003dprops.item_color",
              "iconColor": "blue",
              "iconF7": "app_fill",
              "iconSize": 34.0,
              "style": {
                "background": "transparent",
                "height": "33px",
                "position": "absolute",
                "right": "0px",
                "top": "45px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "180,100,100",
              "actionItem": "\u003dprops.item_color",
              "iconColor": "lightblue",
              "iconF7": "app_fill",
              "iconSize": 34.0,
              "style": {
                "background": "transparent",
                "height": "33px",
                "position": "absolute",
                "right": "0px",
                "top": "80px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "120,100,100",
              "actionItem": "\u003dprops.item_color",
              "iconColor": "green",
              "iconF7": "app_fill",
              "iconSize": 34.0,
              "style": {
                "background": "transparent",
                "height": "33px",
                "position": "absolute",
                "right": "0px",
                "top": "115px"
              }
            }
          },
          {
            "component": "oh-image",
            "config": {
              "style": {
                "height": "25px",
                "left": "10px",
                "opacity": 0.7,
                "position": "absolute",
                "top": "10px"
              },
              "url": "\u003d\u0027/static/icons/\u0027 + props.iconimage + \u0027.png\u0027",
              "visible": "\u003dprops.iconimage ? true : false"
            }
          }
        ]
      }
    }
  },
  "Cell_Settings_1": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Cell_Settings_1",
      "tags": [],
      "props": {
        "parameters": [
          {
            "description": "rgba or HEX",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "page which will be opened as popup",
            "label": "Settingspage",
            "name": "page",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item Group of Battery Critical",
            "label": "Item Group",
            "name": "item_battery",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 12:59:37 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "5px 5px 10px 1px rgba(0,0,0,0.1)",
          "class": [
            {
              "padding": "0px"
            }
          ],
          "height": "150px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false
        }
      },
      "slots": {
        "content": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "display": "flex",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute",
                "top": "-5px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003ditems[props.item_battery].state \u003c 30 ? \"red\": \"green\"",
                    "iconF7": "battery_25",
                    "iconSize": 16.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)",
                      "font-weight": 700.0
                    },
                    "text": "\u003ditems[props.item_battery].state + \u0027%\u0027",
                    "textColor": "\u003ditems[props.item_battery].state \u003c 30 ? \"red\": \"green\"",
                    "visible": "\u003ditems[props.item_battery].state \u003e 0 ? true : false"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "class": [
                "text-align-center"
              ],
              "style": {
                "left": "20px",
                "position": "absolute",
                "top": "80px",
                "width": "100%"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "battery_100",
                    "size": 60.0,
                    "style": {
                      "margin-right": "10px",
                      "margin-top": "-10px",
                      "opacity": 0.6
                    }
                  }
                }
              ]
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "popup",
              "actionModal": "\u003d\u0027page:\u0027 + props.page",
              "style": {
                "height": "150px",
                "left": "0px",
                "position": "absolute",
                "top": "0px",
                "width": "100%"
              }
            }
          }
        ]
      }
    }
  },
  "Cell_Shutter_Card_1": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Cell_Shutter_Card_1",
      "tags": [],
      "props": {
        "parameters": [
          {
            "description": "Small title on top of the card",
            "label": "Title",
            "name": "title",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Header big sized",
            "label": "Header",
            "name": "header",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Icon on top of the card",
            "label": "Icon",
            "name": "icon",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "HEX or rgba",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Shutter item to control",
            "label": "Item",
            "name": "item",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:24:36 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "5px 5px 10px 1px rgba(0,0,0,0.1)",
          "height": "120px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false,
          "padding": "0px"
        }
      },
      "slots": {
        "content": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "display": "flex",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute",
                "top": "-5px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "\u003dprops.icon",
                    "size": 18.0,
                    "style": {
                      "margin-right": "10px"
                    },
                    "visible": "\u003dprops.icon ? true : false"
                  }
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "12px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.title ? props.title : \u0027\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-15px",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "17px",
                      "font-weight": 600.0,
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.header ? props.header : \u0027Set Props\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-35px",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "12px",
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dNumber(items[props.item].state) \u003d\u003d\u003d 0 ? \u0027GeÃ¶ffnet \u0027 + (items[props.item].state) + \u0027%\u0027 : \u0027Geschlossen \u0027  + (items[props.item].state) + \u0027%\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "UP",
              "actionItem": "\u003dprops.item",
              "iconColor": "red",
              "iconF7": "arrow_up_circle",
              "iconSize": 35.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "10px",
                "top": "12px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "STOP",
              "actionItem": "\u003dprops.item",
              "iconColor": "red",
              "iconF7": "stop_circle",
              "iconSize": 29.0,
              "style": {
                "background": "transparent",
                "height": "29px",
                "position": "absolute",
                "right": "13px",
                "top": "46px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "DOWN",
              "actionItem": "\u003dprops.item",
              "iconColor": "red",
              "iconF7": "arrow_down_circle",
              "iconSize": 35.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "10px",
                "top": "74px"
              }
            }
          }
        ]
      }
    }
  },
  "Cell_Speaker_Card_1": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Cell_Speaker_Card_1",
      "tags": [],
      "props": {
        "parameters": [
          {
            "description": "Small title on top of the card",
            "label": "Title",
            "name": "title",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Header big sized",
            "label": "Header",
            "name": "header",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "HEX or rgba",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item to control",
            "label": "Item",
            "name": "item",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item for volume",
            "label": "Item",
            "name": "item_volume",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "Item for Coverbild",
            "label": "Item",
            "name": "item_cover",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:24:55 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "5px 5px 10px 1px rgba(0,0,0,0.1)",
          "height": "120px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false,
          "padding": "0px"
        }
      },
      "slots": {
        "content": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "display": "flex",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute",
                "top": "-5px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "\u003ditems[props.item].state \u003d\u003d\u003d \u0027PLAY\u0027 ? \u0027speaker_3\u0027 : \u0027speaker\u0027",
                    "size": 18.0,
                    "style": {
                      "margin-right": "10px"
                    }
                  }
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "12px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.title ? props.title : \u0027\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-15px",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "17px",
                      "font-weight": 600.0,
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.header ? props.header : \u0027Set Props\u0027"
                  }
                }
              ]
            }
          },
          null,
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "PLAY",
              "actionItem": "\u003dprops.item",
              "iconColor": "\u003ditems[props.item].state \u003d\u003d\u003d \u0027PAUSE\u0027 ? themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027 : \u0027red\u0027 ",
              "iconF7": "play_circle",
              "iconSize": 35.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "10px",
                "top": "12px"
              }
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "PAUSE",
              "actionItem": "\u003dprops.item",
              "iconColor": "\u003ditems[props.item].state \u003d\u003d\u003d \u0027PLAY\u0027 ? themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027 : \u0027red\u0027",
              "iconF7": "pause_circle",
              "iconSize": 35.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "10px",
                "top": "74px"
              }
            }
          },
          {
            "component": "oh-slider",
            "config": {
              "item": "\u003dprops.item_volume",
              "max": 100.0,
              "min": 0.0,
              "style": {
                "--f7-range-bar-border-radius": "8px",
                "--f7-range-bar-size": "8px",
                "--f7-range-knob-box-shadow": "0 2px 4px rgba(0, 0, 0, 0.3)",
                "--f7-range-knob-size": "20px",
                "bottom": "-75px",
                "left": "20px",
                "position": "absolute",
                "width": "calc(100% - 205px)"
              }
            }
          },
          {
            "component": "oh-image",
            "config": {
              "item": "\u003dprops.item_cover",
              "style": {
                "bottom": "-78px",
                "height": "100px",
                "position": "absolute",
                "right": "70px"
              }
            }
          }
        ]
      }
    }
  },
  "Cell_Temp_Card_1": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Cell_Temp_Card_1",
      "tags": [
        "heatmode",
        "humidity",
        "set temp",
        "temperature"
      ],
      "props": {
        "parameters": [
          {
            "description": "Small title on top of the card",
            "label": "Title",
            "name": "title",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Icon on top of the card (only f7 icons (without f7:))",
            "label": "Icon",
            "name": "icon",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "in rgba() or HEX or empty",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "label": "Current Temperature",
            "name": "temp_item",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "label": "Set Temperature",
            "name": "set_temp_item",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "label": "Current Humidity",
            "name": "humidity_item",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "on/off item",
            "label": "Heating control item",
            "name": "heating_item",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:23:44 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "5px 5px 10px 1px rgba(0,0,0,0.1)",
          "height": "120px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false,
          "padding": "0px"
        }
      },
      "slots": {
        "content": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "display": "flex",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute",
                "top": "-5px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "\u003dprops.icon",
                    "size": 18.0,
                    "style": {
                      "margin-right": "10px"
                    },
                    "visible": "\u003dprops.icon ? true : false"
                  }
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "12px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.title ? props.title : \u0027\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-20px",
                "flex-direction": "row",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "22px",
                      "font-weight": 400.0,
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003ditems[props.temp_item].displayState ? items[props.temp_item].displayState : items[props.temp_item].state"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-40px",
                "display": "flex",
                "flex-direction": "row",
                "left": "12px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "drop",
                    "size": 18.0,
                    "visible": "\u003dprops.humidity_item ? true : false"
                  }
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "12px",
                      "margin-left": "5px",
                      "margin-top": "0px"
                    },
                    "text": "\u003ditems[props.humidity_item].displayState",
                    "visible": "\u003dprops.humidity_item ? true : false"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-63px",
                "display": "flex",
                "flex-direction": "row",
                "left": "12px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "flame",
                    "size": 18.0,
                    "visible": "\u003dprops.heating_item ? true : false"
                  }
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "12px",
                      "margin-left": "5px",
                      "margin-top": "0px"
                    },
                    "text": "\u003ditems[props.heating_item].state",
                    "visible": "\u003dprops.heating_item ? true : false"
                  }
                }
              ]
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "\u003dNumber(items[props.set_temp_item].state.split(\u0027 \u0027)[0]) + 0.5",
              "actionItem": "\u003dprops.set_temp_item",
              "iconColor": "red",
              "iconF7": "arrow_up_circle",
              "iconSize": 35.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "10px",
                "top": "12px"
              },
              "visible": "\u003dprops.set_temp_item ? true : false"
            }
          },
          {
            "component": "oh-button",
            "config": {
              "action": "command",
              "actionCommand": "\u003dNumber(items[props.set_temp_item].state.split(\u0027 \u0027)[0]) - 0.5",
              "actionItem": "\u003dprops.set_temp_item",
              "iconColor": "red",
              "iconF7": "arrow_down_circle",
              "iconSize": 35.0,
              "style": {
                "background": "transparent",
                "height": "35px",
                "position": "absolute",
                "right": "10px",
                "top": "74px"
              },
              "visible": "\u003dprops.set_temp_item ? true : false"
            }
          },
          {
            "component": "Label",
            "config": {
              "style": {
                "font-size": "12px",
                "position": "absolute",
                "right": "15px",
                "top": "50px"
              },
              "text": "\u003ditems[props.set_temp_item].state",
              "visible": "\u003dprops.set_temp_item ? true : false"
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "height": "120px",
                "left": "15px",
                "position": "absolute",
                "top": "15px",
                "width": "\u003dprops.set_temp_item ? \u0027calc(100% - 55px)\u0027 : \u0027100%\u0027 "
              }
            },
            "slots": {
              "default": [
                {
                  "component": "oh-trend",
                  "config": {
                    "style": {
                      "--f7-theme-color-bg-color": "transparent",
                      "background": "var(--f7-theme-color-bg-color)",
                      "filter": "opacity(30%)",
                      "height": "100%",
                      "left": "0px",
                      "position": "absolute",
                      "top": "0px",
                      "width": "100%",
                      "z-index": 1.0
                    },
                    "trendGradient": [
                      "#aa2b1d",
                      "#cc561e",
                      "#ef8d32",
                      "#beca5c"
                    ],
                    "trendItem": "\u003dprops.temp_item"
                  }
                }
              ]
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "analyzer",
              "actionAnalyzerChartType": "day",
              "actionAnalyzerCoordSystem": "time",
              "actionAnalyzerItems": "\u003dprops.set_temp_item ? [props.temp_item, props.humidity_item, props.set_temp_item, props.heating_item] : (props.humidity_item ? [props.temp_item, props.humidity_item] : [props.temp_item])",
              "style": {
                "height": "120px",
                "left": "0px",
                "position": "absolute",
                "top": "0px",
                "width": "\u003dprops.set_temp_item ? \u0027calc(100% - 55px)\u0027 : \u0027100%\u0027 "
              }
            }
          }
        ]
      }
    }
  },
  "Command_Button": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Command_Button",
      "tags": [
        "command button"
      ],
      "props": {
        "parameters": [
          {
            "description": "Set the Headline for the first state",
            "label": "Headline 1",
            "name": "headline1",
            "required": false,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "label": "Command 1",
            "name": "command1",
            "required": true,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "label": "Icon 1",
            "name": "icon1",
            "required": false,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "label": "Icon 1 Color",
            "name": "iconcolor1",
            "required": false,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "description": "Set the headline for the second state",
            "label": "Headline 2",
            "name": "headline2",
            "required": false,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "label": "Command 2",
            "name": "command2",
            "required": true,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "label": "Icon 2",
            "name": "icon2",
            "required": false,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "label": "Icon 2 Color",
            "name": "iconcolor2",
            "required": false,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "context": "item",
            "description": "Set the item to control here",
            "label": "Item",
            "name": "item",
            "required": false,
            "type": "TEXT"
          },
          {
            "label": "Headline Color",
            "name": "headlinecolor",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Headline Weight",
            "name": "headlineweight",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Headline Size",
            "name": "headlinesize",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Background",
            "name": "background",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Card height",
            "name": "cardheight",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Card width",
            "name": "cardwidth",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Icon size",
            "name": "iconsize",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          }
        ],
        "parameterGroups": [
          {
            "name": "item1",
            "label": "Status 1"
          },
          {
            "name": "item2",
            "label": "Status 2"
          },
          {
            "name": "styling",
            "label": "Styling"
          }
        ]
      },
      "timestamp": "Dec 9, 2021, 1:22:19 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background": "\u003d(props.background) ? props.background : \"linear-gradient(to bottom, #003366 0%, #00ffff 100%)\"",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "\u003d(items[props.item].state \u003d\u003d\u003d props.command2) ? (props.iconcolor2 ? \"8px 8px 28px 1px \" + props.iconcolor2 : \"10px 10px 28px 1px rgba(255,234,5,0.3)\") : \"var(--f7-card-expandable-box-shadow)\"",
          "height": "\u003dprops.cardheight ? props.cardheight : \"8.5em\"",
          "margin-left": "auto;",
          "margin-right": "auto;",
          "noShadow": false,
          "padding": "0px",
          "width": "\u003dprops.cardwidth ? props.cardwidth : \"8.5em\""
        }
      },
      "slots": {
        "default": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "align-items": "center",
                "display": "grid",
                "grid-template-rows": "1fr auto auto 1fr",
                "height": "100%",
                "justify-items": "center"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label"
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "color": "\u003d(props.headlinecolor) ? props.headlinecolor : \"white\"",
                      "font-size": "\u003d(props.headlinesize) ? props.headlinesize: \"13px\"",
                      "font-weight": "\u003d(props.headlineweight) ? props.headlineweight : \"normal\"",
                      "padding": "3px"
                    },
                    "text": "\u003d(items[props.item].state \u003d\u003d\u003d props.command1) ? ((props.headline1) ? props.headline1 : \"Headline\") : ((props.headline2) ? props.headline2 : \"Headline\")"
                  }
                },
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "\u003d(items[props.item].state \u003d\u003d\u003d props.command2) ? (props.icon2 ? props.icon2 : \"lightbulb_fill\") : (props.icon1 ? props.icon1 : \"lightbulb\")",
                    "size": "\u003dprops.iconsize ? props.iconsize: \"65px\"",
                    "style": {
                      "color": "\u003d(items[props.item].state \u003d\u003d\u003d props.command2) ? (props.iconcolor2 ? props.iconcolor2 : \"rgba(255,234,5,1)\") : (props.iconcolor1 ? props.iconcolor1 : \"\")",
                      "padding": "3px"
                    }
                  }
                }
              ]
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "command",
              "actionCommand": "\u003d(items[props.item].state \u003d\u003d\u003d props.command1) ? props.command2 : props.command1",
              "actionItem": "\u003dprops.item",
              "style": {
                "actionPosition": "center",
                "height": "100%",
                "left": 0.0,
                "position": "absolute",
                "top": 0.0,
                "width": "100%"
              }
            }
          }
        ]
      }
    }
  },
  "Command_Button_Popup": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Command_Button_Popup",
      "tags": [
        "top area acts as popup"
      ],
      "props": {
        "parameters": [
          {
            "description": "Set the Headline for the first state",
            "label": "Headline 1",
            "name": "headline1",
            "required": false,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "label": "Command 1",
            "name": "command1",
            "required": true,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "label": "Icon 1",
            "name": "icon1",
            "required": false,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "label": "Icon 1 Color",
            "name": "iconcolor1",
            "required": false,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "description": "Set the headline for the second state",
            "label": "Headline 2",
            "name": "headline2",
            "required": false,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "label": "Command 2",
            "name": "command2",
            "required": true,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "label": "Icon 2",
            "name": "icon2",
            "required": false,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "label": "Icon 2 Color",
            "name": "iconcolor2",
            "required": false,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "context": "item",
            "description": "Set the item to control here",
            "label": "Item",
            "name": "item",
            "required": false,
            "type": "TEXT"
          },
          {
            "label": "Headline Color",
            "name": "headlinecolor",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Headline Weight",
            "name": "headlineweight",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Headline Size",
            "name": "headlinesize",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Background",
            "name": "background",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Card height",
            "name": "cardheight",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Card width",
            "name": "cardwidth",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "label": "Icon size",
            "name": "iconsize",
            "required": false,
            "type": "TEXT",
            "groupName": "styling"
          },
          {
            "description": "Page which will be opened as popup",
            "label": "Page ID",
            "name": "page",
            "required": false
          }
        ],
        "parameterGroups": [
          {
            "name": "item1",
            "label": "Status 1"
          },
          {
            "name": "item2",
            "label": "Status 2"
          },
          {
            "name": "styling",
            "label": "Styling"
          }
        ]
      },
      "timestamp": "Dec 9, 2021, 1:24:10 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background": "\u003d(props.background) ? props.background : \"linear-gradient(to bottom, #003366 0%, #00ffff 100%)\"",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "\u003d(items[props.item].state \u003d\u003d\u003d props.command2) ? (props.iconcolor2 ? \"8px 8px 28px 1px \" + props.iconcolor2 : \"10px 10px 28px 1px rgba(255,234,5,0.3)\") : \"var(--f7-card-expandable-box-shadow)\"",
          "height": "\u003dprops.cardheight ? props.cardheight : \"8.5em\"",
          "margin-left": "auto;",
          "margin-right": "auto;",
          "noShadow": false,
          "padding": "0px",
          "width": "\u003dprops.cardwidth ? props.cardwidth : \"8.5em\""
        }
      },
      "slots": {
        "default": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "align-items": "center",
                "display": "grid",
                "grid-template-rows": "1fr auto auto 1fr",
                "height": "100%",
                "justify-items": "center"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label"
                },
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "color": "\u003d(props.headlinecolor) ? props.headlinecolor : \"white\"",
                      "font-size": "\u003d(props.headlinesize) ? props.headlinesize: \"13px\"",
                      "font-weight": "\u003d(props.headlineweight) ? props.headlineweight : \"normal\"",
                      "padding": "3px"
                    },
                    "text": "\u003d(items[props.item].state \u003d\u003d\u003d props.command1) ? ((props.headline1) ? props.headline1 : \"Headline\") : ((props.headline2) ? props.headline2 : \"Headline\")"
                  }
                },
                {
                  "component": "f7-icon",
                  "config": {
                    "f7": "\u003d(items[props.item].state \u003d\u003d\u003d props.command2) ? (props.icon2 ? props.icon2 : \"lightbulb_fill\") : (props.icon1 ? props.icon1 : \"lightbulb\")",
                    "size": "\u003dprops.iconsize ? props.iconsize: \"65px\"",
                    "style": {
                      "color": "\u003d(items[props.item].state \u003d\u003d\u003d props.command2) ? (props.iconcolor2 ? props.iconcolor2 : \"rgba(255,234,5,1)\") : (props.iconcolor1 ? props.iconcolor1 : \"\")",
                      "padding": "3px"
                    }
                  }
                }
              ]
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "command",
              "actionCommand": "\u003d(items[props.item].state \u003d\u003d\u003d props.command1) ? props.command2 : props.command1",
              "actionItem": "\u003dprops.item",
              "style": {
                "actionPosition": "center",
                "height": "100%",
                "left": 0.0,
                "position": "absolute",
                "top": 0.0,
                "width": "100%"
              }
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "popup",
              "actionModal": "\u003d\u0027page:\u0027 + props.page",
              "style": {
                "height": "30px",
                "left": "0px",
                "position": "absolute",
                "top": "0px",
                "width": "100%"
              }
            }
          }
        ]
      }
    }
  },
  "Connection_Card_2": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Connection_Card_2",
      "tags": [],
      "props": {
        "parameters": [
          {
            "label": "Header",
            "name": "text_header",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "icon name without \".png\", located in static/icons/ folder",
            "label": "Icon",
            "name": "iconimage",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "HEX or rgba",
            "label": "Backgroundcolor",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Page which will be opened as popup",
            "label": "Page ID",
            "name": "page",
            "required": false
          },
          {
            "context": "item",
            "description": "select item for download",
            "label": "Item",
            "name": "download",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for upload",
            "label": "Item",
            "name": "upload",
            "required": false,
            "type": "TEXT"
          },
          {
            "context": "item",
            "description": "select item for set latency",
            "label": "Item",
            "name": "latency",
            "required": false,
            "type": "TEXT"
          }
        ]
      },
      "timestamp": "Dec 9, 2021, 1:00:09 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "background-color": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--f7-card-expandable-border-radius)",
          "box-shadow": "5px 5px 10px 1px rgba(0,0,0,0.1)",
          "class": [
            {
              "padding": "0px"
            }
          ],
          "height": "125px",
          "margin-left": "5px",
          "margin-right": "5px",
          "noShadow": false
        }
      },
      "slots": {
        "content": [
          {
            "component": "f7-block",
            "config": {
              "style": {
                "left": "50px",
                "position": "absolute",
                "top": "-5px"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "Label",
                  "config": {
                    "style": {
                      "font-size": "17px",
                      "font-weight": 600.0,
                      "margin-left": "0px",
                      "margin-top": "0px"
                    },
                    "text": "\u003dprops.text_header ? props.text_header : \u0027Set Props\u0027"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-37px",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "\u003d(items[props.status].state \u003d\u003d\u003d \u0027ON\u0027) ? \u0027lightbulb\u0027 : \u0027lightbulb_slash\u0027",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003d(items[props.status].state \u003d\u003d\u003d \u0027ON\u0027) ? items[props.status].state : \u0027\u0027",
                    "visible": "\u003dprops.status ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "flame",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.heating].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027\u0027 : \u0027\u0027",
                    "visible": "\u003ditems[props.heating].state \u003d\u003d\u003d \u0027ON\u0027"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.motion].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027\u0027 : \u0027\u0027",
                    "visible": "\u003dprops.motion ? true : false"
                  },
                  "slots": {
                    "media": [
                      {
                        "component": "oh-icon",
                        "config": {
                          "icon": "\u003ditems[props.motion].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027motion\u0027 : \u0027\u0027",
                          "style": {
                            "filter": "\u003d\u0027brightness(\u0027 + (themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u00271\u0027 : \u00270.4\u0027) + \u0027)\u0027",
                            "height": "18px"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.windows_numbers].state \u003e 0 ? items[props.windows_numbers].state : \u0027\u0027",
                    "visible": "\u003ditems[props.windows].state \u003d\u003d\u003d \u0027OPEN\u0027 ? true : false"
                  },
                  "slots": {
                    "media": [
                      {
                        "component": "oh-icon",
                        "config": {
                          "icon": "window-open",
                          "style": {
                            "filter": "\u003d\u0027brightness(\u0027 + (themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u00271\u0027 : \u00270.4\u0027) + \u0027)\u0027",
                            "height": "18px"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "\u003ditems[props.door_lock].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027lock_open\u0027 : \u0027lock\u0027",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.door_lock].state \u003d\u003d\u003d \u0027ON\u0027 ? \u0027\u0027 : \u0027\u0027",
                    "visible": "\u003dprops.door_lock ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003d(Number(items[props.blinds_closed].state) \u003d\u003d\u003d 0) ? \u0027\u0027 : Math.floor(items[props.blinds_closed].state) + \u0027%\u0027",
                    "visible": "\u003d(Number(Math.floor(items[props.blinds_closed].state)) \u003e 0) ? true : false"
                  },
                  "slots": {
                    "media": [
                      {
                        "component": "oh-icon",
                        "config": {
                          "icon": "\u003d(Number(items[props.blinds_closed].state) \u003d\u003d\u003d 0) ? \u0027cinemascreen-30\u0027 : \u0027cinemascreen-100\u0027",
                          "style": {
                            "filter": "\u003d\u0027brightness(\u0027 + (themeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027100\u0027 : \u00270.3\u0027) + \u0027)\u0027",
                            "height": "18px"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "\u003ditems[props.speakers].state \u003d\u003d\u003d \u0027PLAY\u0027 ? \u0027speaker_2\u0027 : \u0027speaker\u0027",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "visible": "\u003ditems[props.speakers].state \u003d\u003d\u003d \u0027PLAY\u0027 ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "sun_min",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003ditems[props.illuminance].displayState",
                    "visible": "\u003dprops.illuminance ? true : false"
                  }
                }
              ]
            }
          },
          {
            "component": "f7-block",
            "config": {
              "style": {
                "bottom": "-65px",
                "left": "16px",
                "position": "absolute"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "download_circle_fill",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003d(items[props.download].displayState  ? items[props.download].displayState : items[props.download].state) ",
                    "visible": "\u003dprops.download ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "upload_circle_fill",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003d(items[props.upload].displayState  ? items[props.upload].displayState : items[props.upload].state) ",
                    "visible": "\u003dprops.upload ? true : false"
                  }
                },
                {
                  "component": "f7-chip",
                  "config": {
                    "iconColor": "\u003dthemeOptions.dark \u003d\u003d\u003d \u0027dark\u0027 ? \u0027white\u0027 : \u0027black\u0027",
                    "iconF7": "timer_fill",
                    "iconSize": 18.0,
                    "style": {
                      "--f7-chip-bg-color": "rgba(255, 255, 255, 0)"
                    },
                    "text": "\u003d(items[props.latency].displayState  ? items[props.latency].displayState : items[props.latency].state) ",
                    "visible": "\u003dprops.latency ? true : false"
                  }
                }
              ]
            }
          },
          {
            "component": "oh-image",
            "config": {
              "style": {
                "height": "25px",
                "left": "16px",
                "opacity": 0.7,
                "position": "absolute",
                "top": "10px"
              },
              "url": "\u003d\u0027/static/icons/\u0027 + props.iconimage + \u0027.png\u0027",
              "visible": "\u003dprops.iconimage ? true : false"
            }
          },
          {
            "component": "oh-link",
            "config": {
              "action": "popup",
              "actionModal": "\u003d\u0027page:\u0027 + props.page",
              "style": {
                "height": "110px",
                "left": "0px",
                "position": "absolute",
                "top": "0px",
                "width": "100%"
              }
            }
          }
        ]
      }
    }
  },
  "Connection_Card_3": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "Connection_Card_3",
      "tags": [],
      "props": {
        "parameters": [
          {
            "description": "Set the height of the Widget",
            "label": "Widget Height",
            "name": "cardheight",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Headline",
            "label": "Headline",
            "name": "headline",
            "required": false,
            "type": "TEXT",
            "groupName": "secondpage"
          },
          {
            "label": "Item name 1",
            "name": "itemname1",
            "required": false,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "context": "item",
            "label": "Item 1",
            "name": "item1",
            "required": false,
            "type": "TEXT",
            "groupName": "item1"
          },
          {
            "label": "Item name 2",
            "name": "itemname2",
            "required": false,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "context": "item",
            "label": "Item 2",
            "name": "item2",
            "required": false,
            "type": "TEXT",
            "groupName": "item2"
          },
          {
            "label": "Item name 3",
            "name": "itemname3",
            "required": false,
            "type": "TEXT",
            "groupName": "item3"
          },
          {
            "context": "item",
            "label": "Item 3",
            "name": "item3",
            "required": false,
            "type": "TEXT",
            "groupName": "item3"
          },
          {
            "label": "Item name 4",
            "name": "itemname4",
            "required": false,
            "type": "TEXT",
            "groupName": "item4"
          },
          {
            "context": "item",
            "label": "Item 4",
            "name": "item4",
            "required": false,
            "type": "TEXT",
            "groupName": "item4"
          },
          {
            "label": "Item name 5",
            "name": "itemname5",
            "required": false,
            "type": "TEXT",
            "groupName": "item5"
          },
          {
            "context": "item",
            "label": "Item 5",
            "name": "item5",
            "required": false,
            "type": "TEXT",
            "groupName": "item5"
          },
          {
            "label": "Item name 6",
            "name": "itemname6",
            "required": false,
            "type": "TEXT",
            "groupName": "item6"
          },
          {
            "context": "item",
            "label": "Item 6",
            "name": "item6",
            "required": false,
            "type": "TEXT",
            "groupName": "item6"
          },
          {
            "label": "Item name 7",
            "name": "itemname7",
            "required": false,
            "type": "TEXT",
            "groupName": "item7"
          },
          {
            "context": "item",
            "label": "Item 7",
            "name": "item7",
            "required": false,
            "type": "TEXT",
            "groupName": "item7"
          },
          {
            "label": "Item name 8",
            "name": "itemname8",
            "required": false,
            "type": "TEXT",
            "groupName": "item8"
          },
          {
            "context": "item",
            "label": "Item 8",
            "name": "item8",
            "required": false,
            "type": "TEXT",
            "groupName": "item8"
          },
          {
            "label": "Item name 9",
            "name": "itemname9",
            "required": false,
            "type": "TEXT",
            "groupName": "item9"
          },
          {
            "context": "item",
            "label": "Item 9",
            "name": "item9",
            "required": false,
            "type": "TEXT",
            "groupName": "item9"
          }
        ],
        "parameterGroups": [
          {
            "name": "secondpage",
            "label": "Second Page"
          },
          {
            "name": "item1",
            "label": "Item 1"
          },
          {
            "name": "item2",
            "label": "Item 2"
          },
          {
            "name": "item3",
            "label": "Item 3"
          },
          {
            "name": "item4",
            "label": "Item 4"
          },
          {
            "name": "item5",
            "label": "Item 5"
          },
          {
            "name": "item6",
            "label": "Item 6"
          },
          {
            "name": "item7",
            "label": "Item 7"
          },
          {
            "name": "item8",
            "label": "Item 8"
          },
          {
            "name": "item9",
            "label": "Item 9"
          }
        ]
      },
      "timestamp": "Dec 9, 2021, 1:34:37 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "--weather-card-border-radius": "20px",
          "--weather-card-color": "\u003d(!props.fontColor) ? \u0027255,255,255\u0027 : props.fontColor",
          "--weather-card-text-color": "rgba(var(--weather-card-color),1)",
          "--weather-card-text-shadow-color": "\u003d(!props.textShadowColor) ? \u00270,0,0\u0027 : props.textShadowColor",
          "--weather-font-size-large": "26px",
          "--weather-font-size-normal": "18px",
          "--weather-font-size-small": "16px",
          "--weather-font-size-xlarge": "60px",
          "--weather-font-size-xsmall": "14px",
          "--weather-font-size-xxlarge": "70px",
          "--weather-font-size-xxsmall": "12px",
          "--weather-text-shadow-light": "2px 2px rgba(var(--weather-card-text-shadow-color),.15)",
          "--weather-text-shadow-strong": "2px 2px rgba(var(--weather-card-text-shadow-color),.35)",
          "--weather-text-transform-time": "uppercase",
          "-moz-user-select": "none",
          "-ms-user-select": "none",
          "-webkit-user-select": "none",
          "background": "#1c1c1d",
          "border-radius": "var(--weather-card-border-radius)",
          "color": "var(--weather-card-text-color)",
          "height": "\u003dprops.cardheight",
          "overflow": "hidden",
          "user-select": "none"
        }
      },
      "slots": {
        "default": [
          {
            "component": "f7-block",
            "config": {
              "class": [
                "no-padding",
                "no-margin",
                "align-items-space-between"
              ],
              "style": {
                "height": "100%",
                "left": 0.0,
                "position": "absolute",
                "top": 0.0,
                "width": "100%"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-list",
                  "config": {
                    "style": {
                      "height": "100%"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "Label",
                        "config": {
                          "style": {
                            "font-size": "25px",
                            "height": "45px",
                            "padding-top": "15px",
                            "text-align": "center"
                          },
                          "text": "\u003dprops.headline ? props.headline : \"Headline\""
                        }
                      },
                      {
                        "component": "f7-row",
                        "config": {
                          "style": {
                            "margin-right": "15px"
                          }
                        },
                        "slots": {
                          "default": [
                            {
                              "component": "f7-col",
                              "config": {
                                "style": {
                                  "width": "50%"
                                }
                              },
                              "slots": {
                                "default": [
                                  {
                                    "component": "f7-list-item",
                                    "config": {
                                      "badge": "\u003dprops.item1 ? ((items[props.item1].state \u003d\u003d\u003d \"ON\") ? \"ON\" : \"OFF\") : false",
                                      "badgeColor": "\u003d(items[props.item1].state \u003d\u003d\u003d \"ON\") ? \"green\" : \"red\"",
                                      "title": "\u003dprops.itemname1 ? props.itemname1 : (props.item1 ? props.item1 : \"\")"
                                    }
                                  },
                                  {
                                    "component": "f7-list-item",
                                    "config": {
                                      "badge": "\u003dprops.item2 ? ((items[props.item2].state \u003d\u003d\u003d \"ON\") ? \"ON\" : \"OFF\") : false",
                                      "badgeColor": "\u003d(items[props.item2].state \u003d\u003d\u003d \"ON\") ? \"green\" : \"red\"",
                                      "title": "\u003dprops.itemname2 ? props.itemname2 : (props.item2 ? props.item2 : \"\")"
                                    }
                                  },
                                  {
                                    "component": "f7-list-item",
                                    "config": {
                                      "badge": "\u003dprops.itemname3 ? ((items[props.item3].state \u003d\u003d\u003d \"ON\") ? \"ON\" : \"OFF\") : false",
                                      "badgeColor": "\u003d(items[props.item3].state \u003d\u003d\u003d \"ON\") ? \"green\" : \"red\"",
                                      "title": "\u003dprops.itemname3 ? props.itemname3 : (props.item3 ? props.item3 : \"\")"
                                    }
                                  },
                                  {
                                    "component": "f7-list-item",
                                    "config": {
                                      "badge": "\u003dprops.itemname4 ? ((items[props.item4].state \u003d\u003d\u003d \"ON\") ? \"ON\" : \"OFF\") : false",
                                      "badgeColor": "\u003d(items[props.item4].state \u003d\u003d\u003d \"ON\") ? \"green\" : \"red\"",
                                      "title": "\u003dprops.itemname4 ? props.itemname4 : (props.item4 ? props.item4 : \"\")"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "component": "f7-col",
                              "config": {
                                "style": {
                                  "width": "50%"
                                }
                              },
                              "slots": {
                                "default": [
                                  {
                                    "component": "f7-list-item",
                                    "config": {
                                      "badge": "\u003dprops.itemname5 ? ((items[props.item5].state \u003d\u003d\u003d \"ON\") ? \"ON\" : \"OFF\") : false",
                                      "badgeColor": "\u003d(items[props.item5].state \u003d\u003d\u003d \"ON\") ? \"green\" : \"red\"",
                                      "title": "\u003dprops.itemname5 ? props.itemname5 : (props.item5 ? props.item5 : \"\")"
                                    }
                                  },
                                  {
                                    "component": "f7-list-item",
                                    "config": {
                                      "badge": "\u003dprops.itemname6 ? ((items[props.item6].state \u003d\u003d\u003d \"ON\") ? \"ON\" : \"OFF\") : false",
                                      "badgeColor": "\u003d(items[props.item6].state \u003d\u003d\u003d \"ON\") ? \"green\" : \"red\"",
                                      "title": "\u003dprops.itemname6 ? props.itemname6 : (props.item6 ? props.item6 : \"\")"
                                    }
                                  },
                                  {
                                    "component": "f7-list-item",
                                    "config": {
                                      "badge": "\u003dprops.itemname7 ? ((items[props.item7].state \u003d\u003d\u003d \"ON\") ? \"ON\" : \"OFF\") : false",
                                      "badgeColor": "\u003d(items[props.item7].state \u003d\u003d\u003d \"ON\") ? \"green\" : \"red\"",
                                      "title": "\u003dprops.itemname7 ? props.itemname7 : (props.item7 ? props.item7 : \"\")"
                                    }
                                  },
                                  {
                                    "component": "f7-list-item",
                                    "config": {
                                      "badge": "\u003dprops.itemname8 ? ((items[props.item8].state \u003d\u003d\u003d \"ON\") ? \"ON\" : \"OFF\") : false",
                                      "badgeColor": "\u003d(items[props.item8].state \u003d\u003d\u003d \"ON\") ? \"green\" : \"red\"",
                                      "title": "\u003dprops.itemname8 ? props.itemname8 : (props.item8 ? props.item8 : \"\")"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  },
  "front_cam_mobile": {
    "class": "org.openhab.core.ui.components.RootUIComponent",
    "value": {
      "uid": "front_cam_mobile",
      "tags": [],
      "props": {
        "parameters": [
          {
            "description": "Set the height of the Widget",
            "label": "Widget Height",
            "name": "cardheight",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "Set the url of the live stream here",
            "label": "Url live stream",
            "name": "urllivestream",
            "required": false,
            "type": "TEXT"
          },
          {
            "description": "rgba or HEX",
            "label": "Background Color",
            "name": "bgcolor",
            "required": false,
            "type": "TEXT"
          }
        ],
        "parameterGroups": []
      },
      "timestamp": "Dec 9, 2021, 1:01:54 PM",
      "component": "f7-card",
      "config": {
        "style": {
          "--weather-card-border-radius": "20px",
          "--weather-card-color": "\u003d(!props.fontColor) ? \u0027255,255,255\u0027 : props.fontColor",
          "--weather-card-text-color": "rgba(var(--weather-card-color),1)",
          "--weather-card-text-shadow-color": "\u003d(!props.textShadowColor) ? \u00270,0,0\u0027 : props.textShadowColor",
          "--weather-font-size-large": "26px",
          "--weather-font-size-normal": "18px",
          "--weather-font-size-small": "16px",
          "--weather-font-size-xlarge": "60px",
          "--weather-font-size-xsmall": "14px",
          "--weather-font-size-xxlarge": "70px",
          "--weather-font-size-xxsmall": "12px",
          "--weather-text-shadow-light": "2px 2px rgba(var(--weather-card-text-shadow-color),.15)",
          "--weather-text-shadow-strong": "2px 2px rgba(var(--weather-card-text-shadow-color),.35)",
          "--weather-text-transform-time": "uppercase",
          "-moz-user-select": "none",
          "-ms-user-select": "none",
          "-webkit-user-select": "none",
          "background": "\u003dprops.bgcolor ? props.bgcolor : \u0027\u0027",
          "border-radius": "var(--weather-card-border-radius)",
          "color": "var(--weather-card-text-color)",
          "height": "\u003dprops.cardheight ? props.cardheight : \"250px\"",
          "overflow": "hidden",
          "user-select": "none"
        }
      },
      "slots": {
        "default": [
          {
            "component": "f7-block",
            "config": {
              "class": [
                "no-padding",
                "no-margin"
              ],
              "style": {
                "height": "100%",
                "left": 0.0,
                "position": "absolute",
                "top": 0.0,
                "width": "100%"
              }
            },
            "slots": {
              "default": [
                {
                  "component": "f7-row",
                  "config": {
                    "style": {
                      "align-items": "center",
                      "display": "grid",
                      "grid-template-columns": "100%",
                      "height": "100%",
                      "justify-items": "center",
                      "padding-left": "10px",
                      "padding-right": "10px"
                    }
                  },
                  "slots": {
                    "default": [
                      {
                        "component": "oh-image",
                        "config": {
                          "url": "\u003dprops.urllivestream ? props.urllivestream : \"https://www.flaticon.com/svg/vstatic/svg/3964/3964391.svg?token\u003dexp\u003d1614265385~hmac\u003d9a01747702e3f44a515d0d898b3f13fc\"",
                          "width": "100%"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  }
}
